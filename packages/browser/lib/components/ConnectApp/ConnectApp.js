"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/es6.regexp.to-string");

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.symbol");

require("core-js/modules/web.dom.iterable");

require("antd/es/alert/style/css");

var _alert = _interopRequireDefault(require("antd/es/alert"));

require("antd/es/modal/style/css");

var _modal = _interopRequireDefault(require("antd/es/modal"));

var _emotion = require("emotion");

require("antd/es/icon/style/css");

var _icon = _interopRequireDefault(require("antd/es/icon"));

require("antd/es/auto-complete/style/css");

var _autoComplete = _interopRequireDefault(require("antd/es/auto-complete"));

require("antd/es/button/style/css");

var _button = _interopRequireDefault(require("antd/es/button"));

require("core-js/modules/es6.regexp.search");

require("antd/es/input/style/css");

var _input = _interopRequireDefault(require("antd/es/input"));

require("antd/es/form/style/css");

var _form = _interopRequireDefault(require("antd/es/form"));

var _react = _interopRequireWildcard(require("react"));

var _reactRedux = require("react-redux");

var _propTypes = require("prop-types");

var _media = require("@divyanshu013/media");

var _app = require("../../reducers/app");

var _actions = require("../../actions");

var _utils = require("../../utils");

var _mode = require("../../reducers/mode");

var _constants = require("../../constants");

var _Flex = _interopRequireDefault(require("../Flex"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const {
  Item
} = _form.default;
const {
  Group
} = _input.default;
const formItemProps = {
  wrapperCol: {
    xs: {
      span: 24
    }
  }
};
const ROUTES_WITHOUT_MULTIPLE_INDEX = ['/mappings', '/preview', '/query'];

const shouldConnect = (pathname, appname) => {
  let isConnecting = false;

  if (ROUTES_WITHOUT_MULTIPLE_INDEX.indexOf(pathname) === -1) {
    isConnecting = true;
  } else if (!(0, _utils.isMultiIndexApp)(appname)) {
    isConnecting = true;
  } else {
    isConnecting = false;
  }

  return isConnecting;
};

class ConnectApp extends _react.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      appname: this.props.appname || '',
      url: this.props.url || '',
      pastApps: [],
      isShowingAppSwitcher: true,
      isUrlHidden: false,
      isShowingHeadersModal: false,
      customHeaders: this.props.headers.length ? this.props.headers : [{
        key: '',
        value: ''
      }]
    });

    _defineProperty(this, "setAppSwitcher", isShowingAppSwitcher => {
      this.setState({
        isShowingAppSwitcher
      });
    });

    _defineProperty(this, "setPastConnections", () => {
      const pastConnections = JSON.parse( // $FlowFixMe
      (0, _utils.getLocalStorageItem)(_constants.LOCAL_CONNECTIONS) || {});
      this.setState({
        pastApps: (pastConnections || {}).pastApps || []
      });
    });

    _defineProperty(this, "handleChange", e => {
      const {
        value,
        name
      } = e.target;
      this.setState({
        [name]: value
      });
    });

    _defineProperty(this, "handleAppNameChange", appname => {
      const {
        pastApps
      } = this.state;
      const pastApp = pastApps.find(app => app.appname === appname);

      if (pastApp) {
        this.setState({
          url: pastApp.url,
          customHeaders: pastApp.headers || []
        });
      }

      this.setState({
        appname
      });
    });

    _defineProperty(this, "handleSubmit", e => {
      e.preventDefault();
      const {
        appname,
        url,
        customHeaders
      } = this.state;
      const {
        sidebar,
        appswitcher,
        footer,
        route
      } = (0, _utils.getUrlParams)(window.location.search);
      const {
        pathname
      } = this.props.location;
      let searchQuery = '?';

      if (sidebar) {
        searchQuery += "&sidebar=".concat(sidebar);
      }

      if (footer) {
        searchQuery += "&sidebar=".concat(footer);
      }

      if (appswitcher) {
        searchQuery += "&appswitcher=".concat(appswitcher);
      }

      if (route) {
        searchQuery += "&route=".concat(route);
      }

      if (this.props.isConnected) {
        this.props.disconnectApp();
        this.props.setMode(_constants.MODES.VIEW);
        this.props.setHeaders([]); // this.setState({
        // 	customHeaders: [{ key: '', value: '' }],
        // 	appname: '',
        // 	url: '',
        // });

        this.props.history.push({
          search: (0, _utils.normalizeSearchQuery)(searchQuery)
        }); // window.location.reload(true);
      } else if (appname && url) {
        if (shouldConnect(pathname, appname)) {
          this.props.connectApp(appname, url);
          this.props.setHeaders(customHeaders); // update history with correct appname and url

          searchQuery += "&appname=".concat(appname, "&url=").concat(url, "&mode=").concat(this.props.mode);
          const {
            pastApps
          } = this.state;

          const newApps = _toConsumableArray(pastApps);

          const pastApp = pastApps.find(app => app.appname === appname);

          if (!pastApp) {
            newApps.push({
              appname,
              url,
              headers: customHeaders.filter(item => item.key.trim() && item.value.trim())
            });
          } else {
            const appIndex = newApps.findIndex(item => item.appname === appname);
            newApps[appIndex] = {
              appname,
              url,
              headers: customHeaders.filter(item => item.key.trim() && item.value.trim())
            };
          }

          this.setState({
            pastApps: newApps
          });
          (0, _utils.setLocalStorageData)(_constants.LOCAL_CONNECTIONS, JSON.stringify({
            pastApps: newApps
          }));
          this.props.history.push({
            search: (0, _utils.normalizeSearchQuery)(searchQuery)
          });

          if (this.props.isHidden) {
            this.setAppSwitcher(false);
          }
        } else {
          this.props.setError({
            message: 'Sorry can not connect to the app with multiple indexes',
            description: 'Please try using single index'
          });
        }
      }
    });

    _defineProperty(this, "handleUrlToggle", () => {
      this.setState((_ref) => {
        let {
          isUrlHidden
        } = _ref;
        return {
          isUrlHidden: !isUrlHidden
        };
      });
    });

    _defineProperty(this, "toggleHeadersModal", () => {
      this.setState((_ref2) => {
        let {
          isShowingHeadersModal
        } = _ref2;
        return {
          isShowingHeadersModal: !isShowingHeadersModal
        };
      });
    });

    _defineProperty(this, "handleHeaderItemChange", (e, index, field) => {
      const {
        target: {
          value
        }
      } = e;
      const {
        customHeaders
      } = this.state;
      this.setState({
        customHeaders: [].concat(_toConsumableArray(customHeaders.slice(0, index)), [_objectSpread({}, customHeaders[index], {
          [field]: value
        })], _toConsumableArray(customHeaders.slice(index + 1)))
      });
    });

    _defineProperty(this, "handleHeadersSubmit", () => {
      const {
        customHeaders
      } = this.state;
      const filteredHeaders = customHeaders.filter(item => item.key.trim() && item.value.trim());
      const {
        isConnected
      } = this.props;

      if (isConnected) {
        const {
          pastApps
        } = JSON.parse((0, _utils.getLocalStorageItem)(_constants.LOCAL_CONNECTIONS));
        const currentApp = pastApps.findIndex(item => item.appname === this.props.appname);
        pastApps[currentApp].headers = filteredHeaders;
        (0, _utils.setLocalStorageData)(_constants.LOCAL_CONNECTIONS, JSON.stringify({
          pastApps
        }));
      }

      this.props.setHeaders(filteredHeaders);
      this.toggleHeadersModal();
    });

    _defineProperty(this, "handleHeaderAfterClose", () => {
      this.setState({
        customHeaders: this.props.headers.length ? this.props.headers : [{
          key: '',
          value: ''
        }]
      });
    });

    _defineProperty(this, "addMoreHeader", () => {
      const {
        customHeaders
      } = this.state;
      this.setState({
        customHeaders: [].concat(_toConsumableArray(customHeaders), [{
          key: '',
          value: ''
        }])
      });
    });

    _defineProperty(this, "handleRemoveHeader", index => {
      const {
        customHeaders
      } = this.state;
      this.setState({
        customHeaders: [].concat(_toConsumableArray(customHeaders.slice(0, index)), _toConsumableArray(customHeaders.slice(index + 1)))
      });
    });
  }

  componentDidMount() {
    // sync state from url
    let appname = '';
    let url = '';
    const {
      mode,
      isConnected,
      isHidden
    } = this.props;
    const {
      appname: queryApp,
      url: queryUrl,
      mode: queryMode,
      sidebar,
      footer,
      appswitcher,
      route
    } = (0, _utils.getUrlParams)(window.location.search);

    if (queryApp && queryUrl) {
      appname = queryApp;
      url = queryUrl;
    } else {
      const {
        appname: propApp,
        url: propUrl
      } = this.props;
      appname = propApp || '';
      url = propUrl || '';
    }

    this.setState({
      appname,
      url
    });

    if (appname && url && !isConnected) {
      const {
        pathname
      } = this.props.location;

      if (shouldConnect(pathname, appname)) {
        this.props.connectApp(appname, url);
        (0, _utils.saveAppToLocalStorage)(appname, url);

        if (isHidden) {
          this.setAppSwitcher(false);
        }
      } else {
        this.props.setError({
          message: 'Sorry can not connect to the app with multiple indexes',
          description: 'Please try using single index'
        });
      }
    }

    if (isConnected && isHidden) {
      this.setAppSwitcher(false);
    }

    if (!queryApp && !queryUrl) {
      let searchQuery = "?appname=".concat(appname, "&url=").concat(url);
      const currentMode = queryMode || mode;
      searchQuery += "&mode=".concat(currentMode);

      if (sidebar) {
        searchQuery += "&sidebar=".concat(sidebar);
      }

      if (footer) {
        searchQuery += "&footer=".concat(footer);
      }

      if (appswitcher) {
        searchQuery += "&appswitcher=".concat(appswitcher);
      }

      if (route) {
        searchQuery += "&route=".concat(route);
      }

      this.props.setMode(currentMode);
      this.props.history.push({
        search: (0, _utils.normalizeSearchQuery)(searchQuery)
      });
    }

    if (queryMode) {
      this.props.setMode(queryMode);
    }

    if (appswitcher && appswitcher === 'false') {
      this.setAppSwitcher(false);
    }

    const customHeaders = (0, _utils.getCustomHeaders)(appname);
    this.props.setHeaders(customHeaders);
    this.setState({
      customHeaders: customHeaders.length ? customHeaders : [{
        key: '',
        value: ''
      }]
    });
    this.setPastConnections();
  }

  render() {
    const {
      appname,
      url,
      pastApps,
      isShowingAppSwitcher,
      isUrlHidden,
      isShowingHeadersModal,
      customHeaders
    } = this.state;
    const {
      isLoading,
      isConnected
    } = this.props;
    return _react.default.createElement("div", null, isShowingAppSwitcher && _react.default.createElement(_form.default, {
      layout: "inline",
      onSubmit: this.handleSubmit
    }, _react.default.createElement(_Flex.default, {
      alignItems: "center"
    }, _react.default.createElement(Item, _extends({}, formItemProps, {
      className: (0, _emotion.css)({
        [_media.mediaMin.medium]: {
          flex: 1
        }
      }, "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0Nvbm5lY3RBcHAvQ29ubmVjdEFwcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpYnVDIiwiZmlsZSI6Ii4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0Nvbm5lY3RBcHAvQ29ubmVjdEFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBGb3JtLCBCdXR0b24sIEFsZXJ0LCBBdXRvQ29tcGxldGUsIElucHV0LCBNb2RhbCwgSWNvbiB9IGZyb20gJ2FudGQnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IG9iamVjdCB9IGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgbWVkaWFNaW4gfSBmcm9tICdAZGl2eWFuc2h1MDEzL21lZGlhJztcblxuaW1wb3J0IHtcbiAgZ2V0QXBwbmFtZSxcbiAgZ2V0VXJsLFxuICBnZXRJc0xvYWRpbmcsXG4gIGdldElzQ29ubmVjdGVkLFxuICBnZXRIZWFkZXJzLFxufSBmcm9tICcuLi8uLi9yZWR1Y2Vycy9hcHAnO1xuaW1wb3J0IHtcbiAgY29ubmVjdEFwcCxcbiAgZGlzY29ubmVjdEFwcCxcbiAgc2V0TW9kZSxcbiAgc2V0RXJyb3IsXG4gIHNldEhlYWRlcnMsXG59IGZyb20gJy4uLy4uL2FjdGlvbnMnO1xuaW1wb3J0IHtcbiAgZ2V0VXJsUGFyYW1zLFxuICBnZXRMb2NhbFN0b3JhZ2VJdGVtLFxuICBzZXRMb2NhbFN0b3JhZ2VEYXRhLFxuICBnZXRDdXN0b21IZWFkZXJzLFxuICBpc011bHRpSW5kZXhBcHAsXG4gIHNhdmVBcHBUb0xvY2FsU3RvcmFnZSxcbiAgbm9ybWFsaXplU2VhcmNoUXVlcnksXG59IGZyb20gJy4uLy4uL3V0aWxzJztcblxuaW1wb3J0IHsgZ2V0TW9kZSB9IGZyb20gJy4uLy4uL3JlZHVjZXJzL21vZGUnO1xuaW1wb3J0IHsgTE9DQUxfQ09OTkVDVElPTlMsIE1PREVTIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzJztcblxuaW1wb3J0IEZsZXggZnJvbSAnLi4vRmxleCc7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIGFwcG5hbWU/OiBzdHJpbmcsXG4gIHVybD86IHN0cmluZyxcbiAgY29ubmVjdEFwcDogKHN0cmluZywgc3RyaW5nKSA9PiB2b2lkLFxuICBkaXNjb25uZWN0QXBwOiAoKSA9PiB2b2lkLFxuICBpc0Nvbm5lY3RlZDogYm9vbGVhbixcbiAgaXNMb2FkaW5nOiBib29sZWFuLFxuICBlcnJvcj86IG9iamVjdCxcbiAgaGlzdG9yeTogb2JqZWN0LFxuICBtb2RlOiBzdHJpbmcsXG4gIHNldE1vZGU6IHN0cmluZyA9PiB2b2lkLFxuICBvbkVycm9yQ2xvc2U6ICgpID0+IHZvaWQsXG4gIGxvY2F0aW9uOiBhbnksXG4gIGlzSGlkZGVuPzogYm9vbGVhbixcbiAgc2V0RXJyb3I6IGFueSA9PiB2b2lkLFxuICBoZWFkZXJzOiBhbnlbXSxcbiAgc2V0SGVhZGVyczogYW55ID0+IHZvaWQsXG59O1xuXG50eXBlIFN0YXRlID0ge1xuICBhcHBuYW1lOiBzdHJpbmcsXG4gIHVybDogc3RyaW5nLFxuICBwYXN0QXBwczogYW55W10sXG4gIGlzU2hvd2luZ0FwcFN3aXRjaGVyOiBib29sZWFuLFxuICBpc1VybEhpZGRlbjogYm9vbGVhbixcbiAgaXNTaG93aW5nSGVhZGVyc01vZGFsOiBib29sZWFuLFxuICBjdXN0b21IZWFkZXJzOiBhbnlbXSxcbn07XG5cbmNvbnN0IHsgSXRlbSB9ID0gRm9ybTtcbmNvbnN0IHsgR3JvdXAgfSA9IElucHV0O1xuXG5jb25zdCBmb3JtSXRlbVByb3BzID0ge1xuICB3cmFwcGVyQ29sOiB7XG4gICAgeHM6IHtcbiAgICAgIHNwYW46IDI0LFxuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBST1VURVNfV0lUSE9VVF9NVUxUSVBMRV9JTkRFWCA9IFsnL21hcHBpbmdzJywgJy9wcmV2aWV3JywgJy9xdWVyeSddO1xuXG5jb25zdCBzaG91bGRDb25uZWN0ID0gKHBhdGhuYW1lLCBhcHBuYW1lKSA9PiB7XG4gIGxldCBpc0Nvbm5lY3RpbmcgPSBmYWxzZTtcblxuICBpZiAoUk9VVEVTX1dJVEhPVVRfTVVMVElQTEVfSU5ERVguaW5kZXhPZihwYXRobmFtZSkgPT09IC0xKSB7XG4gICAgaXNDb25uZWN0aW5nID0gdHJ1ZTtcbiAgfSBlbHNlIGlmICghaXNNdWx0aUluZGV4QXBwKGFwcG5hbWUpKSB7XG4gICAgaXNDb25uZWN0aW5nID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBpc0Nvbm5lY3RpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBpc0Nvbm5lY3Rpbmc7XG59O1xuXG5jbGFzcyBDb25uZWN0QXBwIGV4dGVuZHMgQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xuICBzdGF0ZSA9IHtcbiAgICBhcHBuYW1lOiB0aGlzLnByb3BzLmFwcG5hbWUgfHwgJycsXG4gICAgdXJsOiB0aGlzLnByb3BzLnVybCB8fCAnJyxcbiAgICBwYXN0QXBwczogW10sXG4gICAgaXNTaG93aW5nQXBwU3dpdGNoZXI6IHRydWUsXG4gICAgaXNVcmxIaWRkZW46IGZhbHNlLFxuICAgIGlzU2hvd2luZ0hlYWRlcnNNb2RhbDogZmFsc2UsXG4gICAgY3VzdG9tSGVhZGVyczogdGhpcy5wcm9wcy5oZWFkZXJzLmxlbmd0aFxuICAgICAgPyB0aGlzLnByb3BzLmhlYWRlcnNcbiAgICAgIDogW3sga2V5OiAnJywgdmFsdWU6ICcnIH1dLFxuICB9O1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIC8vIHN5bmMgc3RhdGUgZnJvbSB1cmxcbiAgICBsZXQgYXBwbmFtZSA9ICcnO1xuICAgIGxldCB1cmwgPSAnJztcbiAgICBjb25zdCB7IG1vZGUsIGlzQ29ubmVjdGVkLCBpc0hpZGRlbiB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7XG4gICAgICBhcHBuYW1lOiBxdWVyeUFwcCxcbiAgICAgIHVybDogcXVlcnlVcmwsXG4gICAgICBtb2RlOiBxdWVyeU1vZGUsXG4gICAgICBzaWRlYmFyLFxuICAgICAgZm9vdGVyLFxuICAgICAgYXBwc3dpdGNoZXIsXG4gICAgICByb3V0ZSxcbiAgICB9ID0gZ2V0VXJsUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuXG4gICAgaWYgKHF1ZXJ5QXBwICYmIHF1ZXJ5VXJsKSB7XG4gICAgICBhcHBuYW1lID0gcXVlcnlBcHA7XG4gICAgICB1cmwgPSBxdWVyeVVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgeyBhcHBuYW1lOiBwcm9wQXBwLCB1cmw6IHByb3BVcmwgfSA9IHRoaXMucHJvcHM7XG4gICAgICBhcHBuYW1lID0gcHJvcEFwcCB8fCAnJztcbiAgICAgIHVybCA9IHByb3BVcmwgfHwgJyc7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBhcHBuYW1lLFxuICAgICAgdXJsLFxuICAgIH0pO1xuXG4gICAgaWYgKGFwcG5hbWUgJiYgdXJsICYmICFpc0Nvbm5lY3RlZCkge1xuICAgICAgY29uc3QgeyBwYXRobmFtZSB9ID0gdGhpcy5wcm9wcy5sb2NhdGlvbjtcblxuICAgICAgaWYgKHNob3VsZENvbm5lY3QocGF0aG5hbWUsIGFwcG5hbWUpKSB7XG4gICAgICAgIHRoaXMucHJvcHMuY29ubmVjdEFwcChhcHBuYW1lLCB1cmwpO1xuICAgICAgICBzYXZlQXBwVG9Mb2NhbFN0b3JhZ2UoYXBwbmFtZSwgdXJsKTtcblxuICAgICAgICBpZiAoaXNIaWRkZW4pIHtcbiAgICAgICAgICB0aGlzLnNldEFwcFN3aXRjaGVyKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wcm9wcy5zZXRFcnJvcih7XG4gICAgICAgICAgbWVzc2FnZTogJ1NvcnJ5IGNhbiBub3QgY29ubmVjdCB0byB0aGUgYXBwIHdpdGggbXVsdGlwbGUgaW5kZXhlcycsXG4gICAgICAgICAgZGVzY3JpcHRpb246ICdQbGVhc2UgdHJ5IHVzaW5nIHNpbmdsZSBpbmRleCcsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc0Nvbm5lY3RlZCAmJiBpc0hpZGRlbikge1xuICAgICAgdGhpcy5zZXRBcHBTd2l0Y2hlcihmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKCFxdWVyeUFwcCAmJiAhcXVlcnlVcmwpIHtcbiAgICAgIGxldCBzZWFyY2hRdWVyeSA9IGA/YXBwbmFtZT0ke2FwcG5hbWV9JnVybD0ke3VybH1gO1xuICAgICAgY29uc3QgY3VycmVudE1vZGUgPSBxdWVyeU1vZGUgfHwgbW9kZTtcbiAgICAgIHNlYXJjaFF1ZXJ5ICs9IGAmbW9kZT0ke2N1cnJlbnRNb2RlfWA7XG5cbiAgICAgIGlmIChzaWRlYmFyKSB7XG4gICAgICAgIHNlYXJjaFF1ZXJ5ICs9IGAmc2lkZWJhcj0ke3NpZGViYXJ9YDtcbiAgICAgIH1cblxuICAgICAgaWYgKGZvb3Rlcikge1xuICAgICAgICBzZWFyY2hRdWVyeSArPSBgJmZvb3Rlcj0ke2Zvb3Rlcn1gO1xuICAgICAgfVxuXG4gICAgICBpZiAoYXBwc3dpdGNoZXIpIHtcbiAgICAgICAgc2VhcmNoUXVlcnkgKz0gYCZhcHBzd2l0Y2hlcj0ke2FwcHN3aXRjaGVyfWA7XG4gICAgICB9XG5cbiAgICAgIGlmIChyb3V0ZSkge1xuICAgICAgICBzZWFyY2hRdWVyeSArPSBgJnJvdXRlPSR7cm91dGV9YDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wcm9wcy5zZXRNb2RlKGN1cnJlbnRNb2RlKTtcbiAgICAgIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKHtcbiAgICAgICAgc2VhcmNoOiBub3JtYWxpemVTZWFyY2hRdWVyeShzZWFyY2hRdWVyeSksXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocXVlcnlNb2RlKSB7XG4gICAgICB0aGlzLnByb3BzLnNldE1vZGUocXVlcnlNb2RlKTtcbiAgICB9XG5cbiAgICBpZiAoYXBwc3dpdGNoZXIgJiYgYXBwc3dpdGNoZXIgPT09ICdmYWxzZScpIHtcbiAgICAgIHRoaXMuc2V0QXBwU3dpdGNoZXIoZmFsc2UpO1xuICAgIH1cblxuICAgIGNvbnN0IGN1c3RvbUhlYWRlcnMgPSBnZXRDdXN0b21IZWFkZXJzKGFwcG5hbWUpO1xuICAgIHRoaXMucHJvcHMuc2V0SGVhZGVycyhjdXN0b21IZWFkZXJzKTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGN1c3RvbUhlYWRlcnM6IGN1c3RvbUhlYWRlcnMubGVuZ3RoXG4gICAgICAgID8gY3VzdG9tSGVhZGVyc1xuICAgICAgICA6IFt7IGtleTogJycsIHZhbHVlOiAnJyB9XSxcbiAgICB9KTtcbiAgICB0aGlzLnNldFBhc3RDb25uZWN0aW9ucygpO1xuICB9XG5cbiAgc2V0QXBwU3dpdGNoZXIgPSBpc1Nob3dpbmdBcHBTd2l0Y2hlciA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBpc1Nob3dpbmdBcHBTd2l0Y2hlcixcbiAgICB9KTtcbiAgfTtcblxuICBzZXRQYXN0Q29ubmVjdGlvbnMgPSAoKSA9PiB7XG4gICAgY29uc3QgcGFzdENvbm5lY3Rpb25zID0gSlNPTi5wYXJzZShcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIGdldExvY2FsU3RvcmFnZUl0ZW0oTE9DQUxfQ09OTkVDVElPTlMpIHx8IHt9XG4gICAgKTtcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgcGFzdEFwcHM6IChwYXN0Q29ubmVjdGlvbnMgfHwge30pLnBhc3RBcHBzIHx8IFtdLFxuICAgIH0pO1xuICB9O1xuXG4gIGhhbmRsZUNoYW5nZSA9IGUgPT4ge1xuICAgIGNvbnN0IHsgdmFsdWUsIG5hbWUgfSA9IGUudGFyZ2V0O1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgW25hbWVdOiB2YWx1ZSxcbiAgICB9KTtcbiAgfTtcblxuICBoYW5kbGVBcHBOYW1lQ2hhbmdlID0gYXBwbmFtZSA9PiB7XG4gICAgY29uc3QgeyBwYXN0QXBwcyB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBwYXN0QXBwID0gcGFzdEFwcHMuZmluZChhcHAgPT4gYXBwLmFwcG5hbWUgPT09IGFwcG5hbWUpO1xuXG4gICAgaWYgKHBhc3RBcHApIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICB1cmw6IHBhc3RBcHAudXJsLFxuICAgICAgICBjdXN0b21IZWFkZXJzOiBwYXN0QXBwLmhlYWRlcnMgfHwgW10sXG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBhcHBuYW1lLFxuICAgIH0pO1xuICB9O1xuXG4gIGhhbmRsZVN1Ym1pdCA9IGUgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCB7IGFwcG5hbWUsIHVybCwgY3VzdG9tSGVhZGVycyB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IHNpZGViYXIsIGFwcHN3aXRjaGVyLCBmb290ZXIsIHJvdXRlIH0gPSBnZXRVcmxQYXJhbXMoXG4gICAgICB3aW5kb3cubG9jYXRpb24uc2VhcmNoXG4gICAgKTtcbiAgICBjb25zdCB7IHBhdGhuYW1lIH0gPSB0aGlzLnByb3BzLmxvY2F0aW9uO1xuXG4gICAgbGV0IHNlYXJjaFF1ZXJ5ID0gJz8nO1xuXG4gICAgaWYgKHNpZGViYXIpIHtcbiAgICAgIHNlYXJjaFF1ZXJ5ICs9IGAmc2lkZWJhcj0ke3NpZGViYXJ9YDtcbiAgICB9XG5cbiAgICBpZiAoZm9vdGVyKSB7XG4gICAgICBzZWFyY2hRdWVyeSArPSBgJnNpZGViYXI9JHtmb290ZXJ9YDtcbiAgICB9XG5cbiAgICBpZiAoYXBwc3dpdGNoZXIpIHtcbiAgICAgIHNlYXJjaFF1ZXJ5ICs9IGAmYXBwc3dpdGNoZXI9JHthcHBzd2l0Y2hlcn1gO1xuICAgIH1cblxuICAgIGlmIChyb3V0ZSkge1xuICAgICAgc2VhcmNoUXVlcnkgKz0gYCZyb3V0ZT0ke3JvdXRlfWA7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuaXNDb25uZWN0ZWQpIHtcbiAgICAgIHRoaXMucHJvcHMuZGlzY29ubmVjdEFwcCgpO1xuICAgICAgdGhpcy5wcm9wcy5zZXRNb2RlKE1PREVTLlZJRVcpO1xuICAgICAgdGhpcy5wcm9wcy5zZXRIZWFkZXJzKFtdKTtcbiAgICAgIC8vIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgLy8gXHRjdXN0b21IZWFkZXJzOiBbeyBrZXk6ICcnLCB2YWx1ZTogJycgfV0sXG4gICAgICAvLyBcdGFwcG5hbWU6ICcnLFxuICAgICAgLy8gXHR1cmw6ICcnLFxuICAgICAgLy8gfSk7XG4gICAgICB0aGlzLnByb3BzLmhpc3RvcnkucHVzaCh7XG4gICAgICAgIHNlYXJjaDogbm9ybWFsaXplU2VhcmNoUXVlcnkoc2VhcmNoUXVlcnkpLFxuICAgICAgfSk7XG4gICAgICAvLyB3aW5kb3cubG9jYXRpb24ucmVsb2FkKHRydWUpO1xuICAgIH0gZWxzZSBpZiAoYXBwbmFtZSAmJiB1cmwpIHtcbiAgICAgIGlmIChzaG91bGRDb25uZWN0KHBhdGhuYW1lLCBhcHBuYW1lKSkge1xuICAgICAgICB0aGlzLnByb3BzLmNvbm5lY3RBcHAoYXBwbmFtZSwgdXJsKTtcbiAgICAgICAgdGhpcy5wcm9wcy5zZXRIZWFkZXJzKGN1c3RvbUhlYWRlcnMpO1xuICAgICAgICAvLyB1cGRhdGUgaGlzdG9yeSB3aXRoIGNvcnJlY3QgYXBwbmFtZSBhbmQgdXJsXG4gICAgICAgIHNlYXJjaFF1ZXJ5ICs9IGAmYXBwbmFtZT0ke2FwcG5hbWV9JnVybD0ke3VybH0mbW9kZT0ke3RoaXMucHJvcHMubW9kZX1gO1xuICAgICAgICBjb25zdCB7IHBhc3RBcHBzIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBjb25zdCBuZXdBcHBzID0gWy4uLnBhc3RBcHBzXTtcblxuICAgICAgICBjb25zdCBwYXN0QXBwID0gcGFzdEFwcHMuZmluZChhcHAgPT4gYXBwLmFwcG5hbWUgPT09IGFwcG5hbWUpO1xuXG4gICAgICAgIGlmICghcGFzdEFwcCkge1xuICAgICAgICAgIG5ld0FwcHMucHVzaCh7XG4gICAgICAgICAgICBhcHBuYW1lLFxuICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgaGVhZGVyczogY3VzdG9tSGVhZGVycy5maWx0ZXIoXG4gICAgICAgICAgICAgIGl0ZW0gPT4gaXRlbS5rZXkudHJpbSgpICYmIGl0ZW0udmFsdWUudHJpbSgpXG4gICAgICAgICAgICApLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGFwcEluZGV4ID0gbmV3QXBwcy5maW5kSW5kZXgoaXRlbSA9PiBpdGVtLmFwcG5hbWUgPT09IGFwcG5hbWUpO1xuXG4gICAgICAgICAgbmV3QXBwc1thcHBJbmRleF0gPSB7XG4gICAgICAgICAgICBhcHBuYW1lLFxuICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgaGVhZGVyczogY3VzdG9tSGVhZGVycy5maWx0ZXIoXG4gICAgICAgICAgICAgIGl0ZW0gPT4gaXRlbS5rZXkudHJpbSgpICYmIGl0ZW0udmFsdWUudHJpbSgpXG4gICAgICAgICAgICApLFxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBwYXN0QXBwczogbmV3QXBwcyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc2V0TG9jYWxTdG9yYWdlRGF0YShcbiAgICAgICAgICBMT0NBTF9DT05ORUNUSU9OUyxcbiAgICAgICAgICBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBwYXN0QXBwczogbmV3QXBwcyxcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnByb3BzLmhpc3RvcnkucHVzaCh7XG4gICAgICAgICAgc2VhcmNoOiBub3JtYWxpemVTZWFyY2hRdWVyeShzZWFyY2hRdWVyeSksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmlzSGlkZGVuKSB7XG4gICAgICAgICAgdGhpcy5zZXRBcHBTd2l0Y2hlcihmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucHJvcHMuc2V0RXJyb3Ioe1xuICAgICAgICAgIG1lc3NhZ2U6ICdTb3JyeSBjYW4gbm90IGNvbm5lY3QgdG8gdGhlIGFwcCB3aXRoIG11bHRpcGxlIGluZGV4ZXMnLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnUGxlYXNlIHRyeSB1c2luZyBzaW5nbGUgaW5kZXgnLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgaGFuZGxlVXJsVG9nZ2xlID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoKHsgaXNVcmxIaWRkZW4gfSkgPT4gKHtcbiAgICAgIGlzVXJsSGlkZGVuOiAhaXNVcmxIaWRkZW4sXG4gICAgfSkpO1xuICB9O1xuXG4gIHRvZ2dsZUhlYWRlcnNNb2RhbCA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKCh7IGlzU2hvd2luZ0hlYWRlcnNNb2RhbCB9KSA9PiAoe1xuICAgICAgaXNTaG93aW5nSGVhZGVyc01vZGFsOiAhaXNTaG93aW5nSGVhZGVyc01vZGFsLFxuICAgIH0pKTtcbiAgfTtcblxuICBoYW5kbGVIZWFkZXJJdGVtQ2hhbmdlID0gKGUsIGluZGV4LCBmaWVsZCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHRhcmdldDogeyB2YWx1ZSB9LFxuICAgIH0gPSBlO1xuICAgIGNvbnN0IHsgY3VzdG9tSGVhZGVycyB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY3VzdG9tSGVhZGVyczogW1xuICAgICAgICAuLi5jdXN0b21IZWFkZXJzLnNsaWNlKDAsIGluZGV4KSxcbiAgICAgICAge1xuICAgICAgICAgIC4uLmN1c3RvbUhlYWRlcnNbaW5kZXhdLFxuICAgICAgICAgIFtmaWVsZF06IHZhbHVlLFxuICAgICAgICB9LFxuICAgICAgICAuLi5jdXN0b21IZWFkZXJzLnNsaWNlKGluZGV4ICsgMSksXG4gICAgICBdLFxuICAgIH0pO1xuICB9O1xuXG4gIGhhbmRsZUhlYWRlcnNTdWJtaXQgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBjdXN0b21IZWFkZXJzIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgY29uc3QgZmlsdGVyZWRIZWFkZXJzID0gY3VzdG9tSGVhZGVycy5maWx0ZXIoXG4gICAgICBpdGVtID0+IGl0ZW0ua2V5LnRyaW0oKSAmJiBpdGVtLnZhbHVlLnRyaW0oKVxuICAgICk7XG5cbiAgICBjb25zdCB7IGlzQ29ubmVjdGVkIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKGlzQ29ubmVjdGVkKSB7XG4gICAgICBjb25zdCB7IHBhc3RBcHBzIH0gPSBKU09OLnBhcnNlKGdldExvY2FsU3RvcmFnZUl0ZW0oTE9DQUxfQ09OTkVDVElPTlMpKTtcblxuICAgICAgY29uc3QgY3VycmVudEFwcCA9IHBhc3RBcHBzLmZpbmRJbmRleChcbiAgICAgICAgaXRlbSA9PiBpdGVtLmFwcG5hbWUgPT09IHRoaXMucHJvcHMuYXBwbmFtZVxuICAgICAgKTtcbiAgICAgIHBhc3RBcHBzW2N1cnJlbnRBcHBdLmhlYWRlcnMgPSBmaWx0ZXJlZEhlYWRlcnM7XG5cbiAgICAgIHNldExvY2FsU3RvcmFnZURhdGEoTE9DQUxfQ09OTkVDVElPTlMsIEpTT04uc3RyaW5naWZ5KHsgcGFzdEFwcHMgfSkpO1xuICAgIH1cbiAgICB0aGlzLnByb3BzLnNldEhlYWRlcnMoZmlsdGVyZWRIZWFkZXJzKTtcbiAgICB0aGlzLnRvZ2dsZUhlYWRlcnNNb2RhbCgpO1xuICB9O1xuXG4gIGhhbmRsZUhlYWRlckFmdGVyQ2xvc2UgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjdXN0b21IZWFkZXJzOiB0aGlzLnByb3BzLmhlYWRlcnMubGVuZ3RoXG4gICAgICAgID8gdGhpcy5wcm9wcy5oZWFkZXJzXG4gICAgICAgIDogW3sga2V5OiAnJywgdmFsdWU6ICcnIH1dLFxuICAgIH0pO1xuICB9O1xuXG4gIGFkZE1vcmVIZWFkZXIgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBjdXN0b21IZWFkZXJzIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjdXN0b21IZWFkZXJzOiBbLi4uY3VzdG9tSGVhZGVycywgeyBrZXk6ICcnLCB2YWx1ZTogJycgfV0sXG4gICAgfSk7XG4gIH07XG5cbiAgaGFuZGxlUmVtb3ZlSGVhZGVyID0gaW5kZXggPT4ge1xuICAgIGNvbnN0IHsgY3VzdG9tSGVhZGVycyB9ID0gdGhpcy5zdGF0ZTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGN1c3RvbUhlYWRlcnM6IFtcbiAgICAgICAgLi4uY3VzdG9tSGVhZGVycy5zbGljZSgwLCBpbmRleCksXG4gICAgICAgIC4uLmN1c3RvbUhlYWRlcnMuc2xpY2UoaW5kZXggKyAxKSxcbiAgICAgIF0sXG4gICAgfSk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGFwcG5hbWUsXG4gICAgICB1cmwsXG4gICAgICBwYXN0QXBwcyxcbiAgICAgIGlzU2hvd2luZ0FwcFN3aXRjaGVyLFxuICAgICAgaXNVcmxIaWRkZW4sXG4gICAgICBpc1Nob3dpbmdIZWFkZXJzTW9kYWwsXG4gICAgICBjdXN0b21IZWFkZXJzLFxuICAgIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHsgaXNMb2FkaW5nLCBpc0Nvbm5lY3RlZCB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICB7aXNTaG93aW5nQXBwU3dpdGNoZXIgJiYgKFxuICAgICAgICAgIDxGb3JtIGxheW91dD1cImlubGluZVwiIG9uU3VibWl0PXt0aGlzLmhhbmRsZVN1Ym1pdH0+XG4gICAgICAgICAgICA8RmxleCBhbGlnbkl0ZW1zPVwiY2VudGVyXCI+XG4gICAgICAgICAgICAgIDxJdGVtIHsuLi5mb3JtSXRlbVByb3BzfSBjc3M9e3sgW21lZGlhTWluLm1lZGl1bV06IHsgZmxleDogMSB9IH19PlxuICAgICAgICAgICAgICAgIDxHcm91cCBjb21wYWN0IGNzcz17eyBkaXNwbGF5OiAnZmxleCAhaW1wb3J0YW50JyB9fT5cbiAgICAgICAgICAgICAgICAgIDxJbnB1dFxuICAgICAgICAgICAgICAgICAgICBuYW1lPVwidXJsXCJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3VybH1cbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJVUkwgZm9yIGNsdXN0ZXIgZ29lcyBoZXJlLiBlLmcuICBodHRwczovL3VzZXJuYW1lOnBhc3N3b3JkQHNjYWxyLmFwaS5hcHBiYXNlLmlvXCJcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17aXNDb25uZWN0ZWR9XG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkXG4gICAgICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOlxuICAgICAgICAgICAgICAgICAgICAgICAgaXNVcmxIaWRkZW4gJiYgaXNDb25uZWN0ZWQgJiYgJ3RyYW5zcGFyZW50ICFpbXBvcnRhbnQnLFxuICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICAgICAgICAgICAgICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJyNkOWQ5ZDkgIWltcG9ydGFudCcsXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVVcmxUb2dnbGV9XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDxpXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgZmEgJHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVXJsSGlkZGVuID8gJ2ZhLWV5ZS1zbGFzaCcgOiAnZmEtZXllJ1xuICAgICAgICAgICAgICAgICAgICAgIH1gfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiAnI2Q5ZDlkOSAhaW1wb3J0YW50JyxcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnRvZ2dsZUhlYWRlcnNNb2RhbH1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgSGVhZGVyc1xuICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgPC9Hcm91cD5cbiAgICAgICAgICAgICAgPC9JdGVtPlxuICAgICAgICAgICAgICA8SXRlbVxuICAgICAgICAgICAgICAgIHsuLi5mb3JtSXRlbVByb3BzfVxuICAgICAgICAgICAgICAgIGNzcz17eyBbbWVkaWFNaW4ubWVkaXVtXTogeyBmbGV4OiAwLjM1IH0gfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxBdXRvQ29tcGxldGVcbiAgICAgICAgICAgICAgICAgIGRhdGFTb3VyY2U9e3Bhc3RBcHBzLm1hcChhcHAgPT4gYXBwLmFwcG5hbWUpfVxuICAgICAgICAgICAgICAgICAgdmFsdWU9e2FwcG5hbWV9XG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkFwcG5hbWUgKGFrYSBpbmRleCkgZ29lcyBoZXJlXCJcbiAgICAgICAgICAgICAgICAgIGZpbHRlck9wdGlvbj17KGlucHV0VmFsdWUsIG9wdGlvbikgPT5cbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uLnByb3BzLmNoaWxkcmVuXG4gICAgICAgICAgICAgICAgICAgICAgLnRvVXBwZXJDYXNlKClcbiAgICAgICAgICAgICAgICAgICAgICAuaW5kZXhPZihpbnB1dFZhbHVlLnRvVXBwZXJDYXNlKCkpICE9PSAtMVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQXBwTmFtZUNoYW5nZX1cbiAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtpc0Nvbm5lY3RlZH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L0l0ZW0+XG5cbiAgICAgICAgICAgICAgPEl0ZW0gY3NzPXt7IG1hcmdpblJpZ2h0OiAnMHB4ICFpbXBvcnRhbnQnIH19PlxuICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgIHR5cGU9e2lzQ29ubmVjdGVkID8gJ2RhbmdlcicgOiAncHJpbWFyeSd9XG4gICAgICAgICAgICAgICAgICBodG1sVHlwZT1cInN1Ym1pdFwiXG4gICAgICAgICAgICAgICAgICBpY29uPXtpc0Nvbm5lY3RlZCA/ICdwYXVzZS1jaXJjbGUnIDogJ3BsYXktY2lyY2xlJ31cbiAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXshKGFwcG5hbWUgJiYgdXJsKX1cbiAgICAgICAgICAgICAgICAgIGxvYWRpbmc9e2lzTG9hZGluZ31cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7aXNDb25uZWN0ZWQgPyAnRGlzY29ubmVjdCcgOiAnQ29ubmVjdCd9XG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgIDwvSXRlbT5cbiAgICAgICAgICAgICAgPE1vZGFsXG4gICAgICAgICAgICAgICAgdmlzaWJsZT17aXNTaG93aW5nSGVhZGVyc01vZGFsfVxuICAgICAgICAgICAgICAgIG9uQ2FuY2VsPXt0aGlzLnRvZ2dsZUhlYWRlcnNNb2RhbH1cbiAgICAgICAgICAgICAgICBvbk9rPXt0aGlzLmhhbmRsZUhlYWRlcnNTdWJtaXR9XG4gICAgICAgICAgICAgICAgbWFza0Nsb3NhYmxlPXtmYWxzZX1cbiAgICAgICAgICAgICAgICBkZXN0cm95T25DbG9zZVxuICAgICAgICAgICAgICAgIHRpdGxlPVwiQWRkIEN1c3RvbSBIZWFkZXJzXCJcbiAgICAgICAgICAgICAgICBjc3M9e3sgdG9wOiAxMCB9fVxuICAgICAgICAgICAgICAgIGNsb3NhYmxlPXtmYWxzZX1cbiAgICAgICAgICAgICAgICBhZnRlckNsb3NlPXt0aGlzLmhhbmRsZUhlYWRlckFmdGVyQ2xvc2V9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgICAgbWF4SGVpZ2h0OiAnNTAwcHgnLFxuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ2F1dG8nLFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nUmlnaHQ6IDEwLFxuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8RmxleCBjc3M9e3sgbWFyZ2luQm90dG9tOiAxMCB9fT5cbiAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgICAgICAgZmxleDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IDUsXG4gICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgIEtleVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICBmbGV4OiAxLFxuICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICBWYWx1ZVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDwvRmxleD5cbiAgICAgICAgICAgICAgICAgIHtjdXN0b21IZWFkZXJzLm1hcCgoaXRlbSwgaSkgPT4gKFxuICAgICAgICAgICAgICAgICAgICA8RmxleFxuICAgICAgICAgICAgICAgICAgICAgIGtleT17YGhlYWRlci0ke2l9YH0gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17eyBtYXJnaW5Cb3R0b206IDEwIH19XG4gICAgICAgICAgICAgICAgICAgICAgYWxpZ25JdGVtcz1cImNlbnRlclwiXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZmxleDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogNSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpdGVtLmtleX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2UgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUhlYWRlckl0ZW1DaGFuZ2UoZSwgaSwgJ2tleScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZsZXg6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IDEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2l0ZW0udmFsdWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtlID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVIZWFkZXJJdGVtQ2hhbmdlKGUsIGksICd2YWx1ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IDEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5XaWR0aDogMTUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtjdXN0b21IZWFkZXJzLmxlbmd0aCA+IDAgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8SWNvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJjbG9zZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5oYW5kbGVSZW1vdmVIZWFkZXIoaSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9GbGV4PlxuICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgaWNvbj1cInBsdXNcIlxuICAgICAgICAgICAgICAgICAgdHlwZT1cInByaW1hcnlcIlxuICAgICAgICAgICAgICAgICAgY3NzPXt7IG1hcmdpblRvcDogMTAsIG1hcmdpbkxlZnQ6IDUgfX1cbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuYWRkTW9yZUhlYWRlcn1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L01vZGFsPlxuICAgICAgICAgICAgPC9GbGV4PlxuICAgICAgICAgIDwvRm9ybT5cbiAgICAgICAgKX1cbiAgICAgICAgeyFpc0xvYWRpbmcgJiYgIWlzQ29ubmVjdGVkICYmIChcbiAgICAgICAgICA8QWxlcnRcbiAgICAgICAgICAgIHR5cGU9XCJpbmZvXCJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uPXtcbiAgICAgICAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICA8aDMgc3R5bGU9e3sgbWFyZ2luVG9wOiAnMXJlbScgfX0+Q29ubmVjdGlvbiBUaXBzPC9oMz5cbiAgICAgICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgIFlvdSBjYW4gY29ubmVjdCB0byBhbGwgaW5kaWNlcyBieSBwYXNzaW5nIGFueycgJ31cbiAgICAgICAgICAgICAgICAgICAgICA8Y29kZT4qPC9jb2RlPiBpbiB0aGUgYXBwIG5hbWUgaW5wdXQgZmllbGQuXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICBZb3UgY2FuIGFsc28gY29ubmVjdCB0byBhIHNpbmdsZSBpbmRleCBvciBtdWx0aXBsZSBpbmRpY2VzXG4gICAgICAgICAgICAgICAgICAgICAgYnkgcGFzc2luZyB0aGVtIGFzIGNvbW1hIHNlcGFyYXRlZCB2YWx1ZXM6IGUuZy5cbiAgICAgICAgICAgICAgICAgICAgICBpbmRleDEsaW5kZXgyLGluZGV4My5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgIEF2b2lkIHVzaW5nIGEgdHJhaWxpbmcgc2xhc2ggPGNvZGU+LzwvY29kZT4gYWZ0ZXIgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgY2x1c3RlciBhZGRyZXNzLlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgWW91ciBjbHVzdGVyIG5lZWRzIHRvIGhhdmUgQ09SUyBlbmFibGVkIGZvciB0aGUgb3JpZ2luXG4gICAgICAgICAgICAgICAgICAgICAgd2hlcmUgRGVqYXZ1IGlzIHJ1bm5pbmcuIFNlZSBiZWxvdyBmb3IgbW9yZSBvbiB0aGF0LlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICAgIDxoMz5DT1JTIFNldHRpbmdzPC9oMz5cbiAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICBUbyBtYWtlIHN1cmUgeW91IGhhdmUgZW5hYmxlZCBDT1JTIHNldHRpbmdzIGZvciB5b3VyXG4gICAgICAgICAgICAgICAgICAgIEVsYXN0aWNTZWFyY2ggaW5zdGFuY2UsIGFkZCB0aGUgZm9sbG93aW5nIGxpbmVzIGluIHRoZSBFU1xuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uIGZpbGU6XG4gICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICA8cHJlPlxuICAgICAgICAgICAgICAgICAgICB7YGh0dHAucG9ydDogOTIwMFxuaHR0cC5jb3JzLmFsbG93LW9yaWdpbjogaHR0cDovL2xvY2FsaG9zdDoxMzU4LGh0dHA6Ly8xMjcuMC4wLjE6MTM1OFxuaHR0cC5jb3JzLmVuYWJsZWQ6IHRydWVcbmh0dHAuY29ycy5hbGxvdy1oZWFkZXJzIDogWC1SZXF1ZXN0ZWQtV2l0aCxYLUF1dGgtVG9rZW4sQ29udGVudC1UeXBlLENvbnRlbnQtTGVuZ3RoLEF1dGhvcml6YXRpb25cbmh0dHAuY29ycy5hbGxvdy1jcmVkZW50aWFsczogdHJ1ZWB9XG4gICAgICAgICAgICAgICAgICA8L3ByZT5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXt7IG1hcmdpblRvcDogJzJyZW0nIH19PlxuICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgIElmIHlvdSBhcmUgcnVubmluZyBFbGFzdGljU2VhcmNoIHZpYSBEb2NrZXIsIHVzZSB0aGVcbiAgICAgICAgICAgICAgICAgICAgZm9sbG93aW5nIGNvbW1hbmQ6XG4gICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJyNmZWZlZmUnLFxuICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6ICc4cHgnLFxuICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8Y29kZT5cbiAgICAgICAgICAgICAgICAgICAgICBkb2NrZXIgcnVuIC0tbmFtZSBlcyAtZCAtcCA5MjAwOjkyMDAgLWUgaHR0cC5wb3J0PTkyMDAgLWVcbiAgICAgICAgICAgICAgICAgICAgICBodHRwLmNvcnMuZW5hYmxlZD10cnVlIC1lXG4gICAgICAgICAgICAgICAgICAgICAgaHR0cC5jb3JzLmFsbG93LW9yaWdpbj1odHRwOi8vbG9jYWxob3N0OjEzNTgsaHR0cDovLzEyNy4wLjAuMToxMzU4XG4gICAgICAgICAgICAgICAgICAgICAgLWVcbiAgICAgICAgICAgICAgICAgICAgICBodHRwLmNvcnMuYWxsb3ctaGVhZGVycz1YLVJlcXVlc3RlZC1XaXRoLFgtQXV0aC1Ub2tlbixDb250ZW50LVR5cGUsQ29udGVudC1MZW5ndGgsQXV0aG9yaXphdGlvblxuICAgICAgICAgICAgICAgICAgICAgIC1lIGh0dHAuY29ycy5hbGxvdy1jcmVkZW50aWFscz10cnVlXG4gICAgICAgICAgICAgICAgICAgICAgZG9ja2VyLmVsYXN0aWMuY28vZWxhc3RpY3NlYXJjaC9lbGFzdGljc2VhcmNoLW9zczo2LjcuMlxuICAgICAgICAgICAgICAgICAgICA8L2NvZGU+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDxwIHN0eWxlPXt7IG1hcmdpblRvcDogJzE0cHgnIH19PlxuICAgICAgICAgICAgICAgICAgICBPciB0aGUgZm9sbG93aW5nIGlmIHlvdSBhcmUgdXNpbmcgdjcgRWxhc3RpY1NlYXJjaDpcbiAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAnI2ZlZmVmZScsXG4gICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogJzhweCcsXG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDxjb2RlPlxuICAgICAgICAgICAgICAgICAgICAgIGRvY2tlciBydW4gLWQgLS1ybSAtLW5hbWUgZWxhc3RpY3NlYXJjaCAtcCA5MjAwOjkyMDAgLXBcbiAgICAgICAgICAgICAgICAgICAgICA5MzAwOjkzMDAgLWUgZGlzY292ZXJ5LnR5cGU9c2luZ2xlLW5vZGUgLWVcbiAgICAgICAgICAgICAgICAgICAgICBodHRwLmNvcnMuZW5hYmxlZD10cnVlIC1lXG4gICAgICAgICAgICAgICAgICAgICAgaHR0cC5jb3JzLmFsbG93LW9yaWdpbj1odHRwOi8vbG9jYWxob3N0OjEzNTgsaHR0cDovLzEyNy4wLjAuMToxMzU4XG4gICAgICAgICAgICAgICAgICAgICAgLWVcbiAgICAgICAgICAgICAgICAgICAgICBodHRwLmNvcnMuYWxsb3ctaGVhZGVycz1YLVJlcXVlc3RlZC1XaXRoLFgtQXV0aC1Ub2tlbixDb250ZW50LVR5cGUsQ29udGVudC1MZW5ndGgsQXV0aG9yaXphdGlvblxuICAgICAgICAgICAgICAgICAgICAgIC1lIGh0dHAuY29ycy5hbGxvdy1jcmVkZW50aWFscz10cnVlXG4gICAgICAgICAgICAgICAgICAgICAgZG9ja2VyLmVsYXN0aWMuY28vZWxhc3RpY3NlYXJjaC9lbGFzdGljc2VhcmNoLW9zczo3LjAuMVxuICAgICAgICAgICAgICAgICAgICA8L2NvZGU+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSBzdGF0ZSA9PiAoe1xuICBhcHBuYW1lOiBnZXRBcHBuYW1lKHN0YXRlKSxcbiAgdXJsOiBnZXRVcmwoc3RhdGUpLFxuICBpc0Nvbm5lY3RlZDogZ2V0SXNDb25uZWN0ZWQoc3RhdGUpLFxuICBpc0xvYWRpbmc6IGdldElzTG9hZGluZyhzdGF0ZSksXG4gIG1vZGU6IGdldE1vZGUoc3RhdGUpLFxuICBoZWFkZXJzOiBnZXRIZWFkZXJzKHN0YXRlKSxcbn0pO1xuXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSB7XG4gIGNvbm5lY3RBcHAsXG4gIGRpc2Nvbm5lY3RBcHAsXG4gIHNldE1vZGUsXG4gIHNldEVycm9yLFxuICBzZXRIZWFkZXJzLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChcbiAgbWFwU3RhdGVUb1Byb3BzLFxuICBtYXBEaXNwYXRjaFRvUHJvcHNcbikoQ29ubmVjdEFwcCk7XG4iXX0= */")
    }), _react.default.createElement(Group, {
      compact: true,
      className: (0, _emotion.css)({
        display: 'flex !important'
      }, "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0Nvbm5lY3RBcHAvQ29ubmVjdEFwcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrYitCIiwiZmlsZSI6Ii4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0Nvbm5lY3RBcHAvQ29ubmVjdEFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBGb3JtLCBCdXR0b24sIEFsZXJ0LCBBdXRvQ29tcGxldGUsIElucHV0LCBNb2RhbCwgSWNvbiB9IGZyb20gJ2FudGQnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IG9iamVjdCB9IGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgbWVkaWFNaW4gfSBmcm9tICdAZGl2eWFuc2h1MDEzL21lZGlhJztcblxuaW1wb3J0IHtcbiAgZ2V0QXBwbmFtZSxcbiAgZ2V0VXJsLFxuICBnZXRJc0xvYWRpbmcsXG4gIGdldElzQ29ubmVjdGVkLFxuICBnZXRIZWFkZXJzLFxufSBmcm9tICcuLi8uLi9yZWR1Y2Vycy9hcHAnO1xuaW1wb3J0IHtcbiAgY29ubmVjdEFwcCxcbiAgZGlzY29ubmVjdEFwcCxcbiAgc2V0TW9kZSxcbiAgc2V0RXJyb3IsXG4gIHNldEhlYWRlcnMsXG59IGZyb20gJy4uLy4uL2FjdGlvbnMnO1xuaW1wb3J0IHtcbiAgZ2V0VXJsUGFyYW1zLFxuICBnZXRMb2NhbFN0b3JhZ2VJdGVtLFxuICBzZXRMb2NhbFN0b3JhZ2VEYXRhLFxuICBnZXRDdXN0b21IZWFkZXJzLFxuICBpc011bHRpSW5kZXhBcHAsXG4gIHNhdmVBcHBUb0xvY2FsU3RvcmFnZSxcbiAgbm9ybWFsaXplU2VhcmNoUXVlcnksXG59IGZyb20gJy4uLy4uL3V0aWxzJztcblxuaW1wb3J0IHsgZ2V0TW9kZSB9IGZyb20gJy4uLy4uL3JlZHVjZXJzL21vZGUnO1xuaW1wb3J0IHsgTE9DQUxfQ09OTkVDVElPTlMsIE1PREVTIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzJztcblxuaW1wb3J0IEZsZXggZnJvbSAnLi4vRmxleCc7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIGFwcG5hbWU/OiBzdHJpbmcsXG4gIHVybD86IHN0cmluZyxcbiAgY29ubmVjdEFwcDogKHN0cmluZywgc3RyaW5nKSA9PiB2b2lkLFxuICBkaXNjb25uZWN0QXBwOiAoKSA9PiB2b2lkLFxuICBpc0Nvbm5lY3RlZDogYm9vbGVhbixcbiAgaXNMb2FkaW5nOiBib29sZWFuLFxuICBlcnJvcj86IG9iamVjdCxcbiAgaGlzdG9yeTogb2JqZWN0LFxuICBtb2RlOiBzdHJpbmcsXG4gIHNldE1vZGU6IHN0cmluZyA9PiB2b2lkLFxuICBvbkVycm9yQ2xvc2U6ICgpID0+IHZvaWQsXG4gIGxvY2F0aW9uOiBhbnksXG4gIGlzSGlkZGVuPzogYm9vbGVhbixcbiAgc2V0RXJyb3I6IGFueSA9PiB2b2lkLFxuICBoZWFkZXJzOiBhbnlbXSxcbiAgc2V0SGVhZGVyczogYW55ID0+IHZvaWQsXG59O1xuXG50eXBlIFN0YXRlID0ge1xuICBhcHBuYW1lOiBzdHJpbmcsXG4gIHVybDogc3RyaW5nLFxuICBwYXN0QXBwczogYW55W10sXG4gIGlzU2hvd2luZ0FwcFN3aXRjaGVyOiBib29sZWFuLFxuICBpc1VybEhpZGRlbjogYm9vbGVhbixcbiAgaXNTaG93aW5nSGVhZGVyc01vZGFsOiBib29sZWFuLFxuICBjdXN0b21IZWFkZXJzOiBhbnlbXSxcbn07XG5cbmNvbnN0IHsgSXRlbSB9ID0gRm9ybTtcbmNvbnN0IHsgR3JvdXAgfSA9IElucHV0O1xuXG5jb25zdCBmb3JtSXRlbVByb3BzID0ge1xuICB3cmFwcGVyQ29sOiB7XG4gICAgeHM6IHtcbiAgICAgIHNwYW46IDI0LFxuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBST1VURVNfV0lUSE9VVF9NVUxUSVBMRV9JTkRFWCA9IFsnL21hcHBpbmdzJywgJy9wcmV2aWV3JywgJy9xdWVyeSddO1xuXG5jb25zdCBzaG91bGRDb25uZWN0ID0gKHBhdGhuYW1lLCBhcHBuYW1lKSA9PiB7XG4gIGxldCBpc0Nvbm5lY3RpbmcgPSBmYWxzZTtcblxuICBpZiAoUk9VVEVTX1dJVEhPVVRfTVVMVElQTEVfSU5ERVguaW5kZXhPZihwYXRobmFtZSkgPT09IC0xKSB7XG4gICAgaXNDb25uZWN0aW5nID0gdHJ1ZTtcbiAgfSBlbHNlIGlmICghaXNNdWx0aUluZGV4QXBwKGFwcG5hbWUpKSB7XG4gICAgaXNDb25uZWN0aW5nID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBpc0Nvbm5lY3RpbmcgPSBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBpc0Nvbm5lY3Rpbmc7XG59O1xuXG5jbGFzcyBDb25uZWN0QXBwIGV4dGVuZHMgQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xuICBzdGF0ZSA9IHtcbiAgICBhcHBuYW1lOiB0aGlzLnByb3BzLmFwcG5hbWUgfHwgJycsXG4gICAgdXJsOiB0aGlzLnByb3BzLnVybCB8fCAnJyxcbiAgICBwYXN0QXBwczogW10sXG4gICAgaXNTaG93aW5nQXBwU3dpdGNoZXI6IHRydWUsXG4gICAgaXNVcmxIaWRkZW46IGZhbHNlLFxuICAgIGlzU2hvd2luZ0hlYWRlcnNNb2RhbDogZmFsc2UsXG4gICAgY3VzdG9tSGVhZGVyczogdGhpcy5wcm9wcy5oZWFkZXJzLmxlbmd0aFxuICAgICAgPyB0aGlzLnByb3BzLmhlYWRlcnNcbiAgICAgIDogW3sga2V5OiAnJywgdmFsdWU6ICcnIH1dLFxuICB9O1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIC8vIHN5bmMgc3RhdGUgZnJvbSB1cmxcbiAgICBsZXQgYXBwbmFtZSA9ICcnO1xuICAgIGxldCB1cmwgPSAnJztcbiAgICBjb25zdCB7IG1vZGUsIGlzQ29ubmVjdGVkLCBpc0hpZGRlbiB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7XG4gICAgICBhcHBuYW1lOiBxdWVyeUFwcCxcbiAgICAgIHVybDogcXVlcnlVcmwsXG4gICAgICBtb2RlOiBxdWVyeU1vZGUsXG4gICAgICBzaWRlYmFyLFxuICAgICAgZm9vdGVyLFxuICAgICAgYXBwc3dpdGNoZXIsXG4gICAgICByb3V0ZSxcbiAgICB9ID0gZ2V0VXJsUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuXG4gICAgaWYgKHF1ZXJ5QXBwICYmIHF1ZXJ5VXJsKSB7XG4gICAgICBhcHBuYW1lID0gcXVlcnlBcHA7XG4gICAgICB1cmwgPSBxdWVyeVVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgeyBhcHBuYW1lOiBwcm9wQXBwLCB1cmw6IHByb3BVcmwgfSA9IHRoaXMucHJvcHM7XG4gICAgICBhcHBuYW1lID0gcHJvcEFwcCB8fCAnJztcbiAgICAgIHVybCA9IHByb3BVcmwgfHwgJyc7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBhcHBuYW1lLFxuICAgICAgdXJsLFxuICAgIH0pO1xuXG4gICAgaWYgKGFwcG5hbWUgJiYgdXJsICYmICFpc0Nvbm5lY3RlZCkge1xuICAgICAgY29uc3QgeyBwYXRobmFtZSB9ID0gdGhpcy5wcm9wcy5sb2NhdGlvbjtcblxuICAgICAgaWYgKHNob3VsZENvbm5lY3QocGF0aG5hbWUsIGFwcG5hbWUpKSB7XG4gICAgICAgIHRoaXMucHJvcHMuY29ubmVjdEFwcChhcHBuYW1lLCB1cmwpO1xuICAgICAgICBzYXZlQXBwVG9Mb2NhbFN0b3JhZ2UoYXBwbmFtZSwgdXJsKTtcblxuICAgICAgICBpZiAoaXNIaWRkZW4pIHtcbiAgICAgICAgICB0aGlzLnNldEFwcFN3aXRjaGVyKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wcm9wcy5zZXRFcnJvcih7XG4gICAgICAgICAgbWVzc2FnZTogJ1NvcnJ5IGNhbiBub3QgY29ubmVjdCB0byB0aGUgYXBwIHdpdGggbXVsdGlwbGUgaW5kZXhlcycsXG4gICAgICAgICAgZGVzY3JpcHRpb246ICdQbGVhc2UgdHJ5IHVzaW5nIHNpbmdsZSBpbmRleCcsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc0Nvbm5lY3RlZCAmJiBpc0hpZGRlbikge1xuICAgICAgdGhpcy5zZXRBcHBTd2l0Y2hlcihmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKCFxdWVyeUFwcCAmJiAhcXVlcnlVcmwpIHtcbiAgICAgIGxldCBzZWFyY2hRdWVyeSA9IGA/YXBwbmFtZT0ke2FwcG5hbWV9JnVybD0ke3VybH1gO1xuICAgICAgY29uc3QgY3VycmVudE1vZGUgPSBxdWVyeU1vZGUgfHwgbW9kZTtcbiAgICAgIHNlYXJjaFF1ZXJ5ICs9IGAmbW9kZT0ke2N1cnJlbnRNb2RlfWA7XG5cbiAgICAgIGlmIChzaWRlYmFyKSB7XG4gICAgICAgIHNlYXJjaFF1ZXJ5ICs9IGAmc2lkZWJhcj0ke3NpZGViYXJ9YDtcbiAgICAgIH1cblxuICAgICAgaWYgKGZvb3Rlcikge1xuICAgICAgICBzZWFyY2hRdWVyeSArPSBgJmZvb3Rlcj0ke2Zvb3Rlcn1gO1xuICAgICAgfVxuXG4gICAgICBpZiAoYXBwc3dpdGNoZXIpIHtcbiAgICAgICAgc2VhcmNoUXVlcnkgKz0gYCZhcHBzd2l0Y2hlcj0ke2FwcHN3aXRjaGVyfWA7XG4gICAgICB9XG5cbiAgICAgIGlmIChyb3V0ZSkge1xuICAgICAgICBzZWFyY2hRdWVyeSArPSBgJnJvdXRlPSR7cm91dGV9YDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wcm9wcy5zZXRNb2RlKGN1cnJlbnRNb2RlKTtcbiAgICAgIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKHtcbiAgICAgICAgc2VhcmNoOiBub3JtYWxpemVTZWFyY2hRdWVyeShzZWFyY2hRdWVyeSksXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocXVlcnlNb2RlKSB7XG4gICAgICB0aGlzLnByb3BzLnNldE1vZGUocXVlcnlNb2RlKTtcbiAgICB9XG5cbiAgICBpZiAoYXBwc3dpdGNoZXIgJiYgYXBwc3dpdGNoZXIgPT09ICdmYWxzZScpIHtcbiAgICAgIHRoaXMuc2V0QXBwU3dpdGNoZXIoZmFsc2UpO1xuICAgIH1cblxuICAgIGNvbnN0IGN1c3RvbUhlYWRlcnMgPSBnZXRDdXN0b21IZWFkZXJzKGFwcG5hbWUpO1xuICAgIHRoaXMucHJvcHMuc2V0SGVhZGVycyhjdXN0b21IZWFkZXJzKTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGN1c3RvbUhlYWRlcnM6IGN1c3RvbUhlYWRlcnMubGVuZ3RoXG4gICAgICAgID8gY3VzdG9tSGVhZGVyc1xuICAgICAgICA6IFt7IGtleTogJycsIHZhbHVlOiAnJyB9XSxcbiAgICB9KTtcbiAgICB0aGlzLnNldFBhc3RDb25uZWN0aW9ucygpO1xuICB9XG5cbiAgc2V0QXBwU3dpdGNoZXIgPSBpc1Nob3dpbmdBcHBTd2l0Y2hlciA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBpc1Nob3dpbmdBcHBTd2l0Y2hlcixcbiAgICB9KTtcbiAgfTtcblxuICBzZXRQYXN0Q29ubmVjdGlvbnMgPSAoKSA9PiB7XG4gICAgY29uc3QgcGFzdENvbm5lY3Rpb25zID0gSlNPTi5wYXJzZShcbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIGdldExvY2FsU3RvcmFnZUl0ZW0oTE9DQUxfQ09OTkVDVElPTlMpIHx8IHt9XG4gICAgKTtcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgcGFzdEFwcHM6IChwYXN0Q29ubmVjdGlvbnMgfHwge30pLnBhc3RBcHBzIHx8IFtdLFxuICAgIH0pO1xuICB9O1xuXG4gIGhhbmRsZUNoYW5nZSA9IGUgPT4ge1xuICAgIGNvbnN0IHsgdmFsdWUsIG5hbWUgfSA9IGUudGFyZ2V0O1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgW25hbWVdOiB2YWx1ZSxcbiAgICB9KTtcbiAgfTtcblxuICBoYW5kbGVBcHBOYW1lQ2hhbmdlID0gYXBwbmFtZSA9PiB7XG4gICAgY29uc3QgeyBwYXN0QXBwcyB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBwYXN0QXBwID0gcGFzdEFwcHMuZmluZChhcHAgPT4gYXBwLmFwcG5hbWUgPT09IGFwcG5hbWUpO1xuXG4gICAgaWYgKHBhc3RBcHApIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICB1cmw6IHBhc3RBcHAudXJsLFxuICAgICAgICBjdXN0b21IZWFkZXJzOiBwYXN0QXBwLmhlYWRlcnMgfHwgW10sXG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBhcHBuYW1lLFxuICAgIH0pO1xuICB9O1xuXG4gIGhhbmRsZVN1Ym1pdCA9IGUgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCB7IGFwcG5hbWUsIHVybCwgY3VzdG9tSGVhZGVycyB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IHNpZGViYXIsIGFwcHN3aXRjaGVyLCBmb290ZXIsIHJvdXRlIH0gPSBnZXRVcmxQYXJhbXMoXG4gICAgICB3aW5kb3cubG9jYXRpb24uc2VhcmNoXG4gICAgKTtcbiAgICBjb25zdCB7IHBhdGhuYW1lIH0gPSB0aGlzLnByb3BzLmxvY2F0aW9uO1xuXG4gICAgbGV0IHNlYXJjaFF1ZXJ5ID0gJz8nO1xuXG4gICAgaWYgKHNpZGViYXIpIHtcbiAgICAgIHNlYXJjaFF1ZXJ5ICs9IGAmc2lkZWJhcj0ke3NpZGViYXJ9YDtcbiAgICB9XG5cbiAgICBpZiAoZm9vdGVyKSB7XG4gICAgICBzZWFyY2hRdWVyeSArPSBgJnNpZGViYXI9JHtmb290ZXJ9YDtcbiAgICB9XG5cbiAgICBpZiAoYXBwc3dpdGNoZXIpIHtcbiAgICAgIHNlYXJjaFF1ZXJ5ICs9IGAmYXBwc3dpdGNoZXI9JHthcHBzd2l0Y2hlcn1gO1xuICAgIH1cblxuICAgIGlmIChyb3V0ZSkge1xuICAgICAgc2VhcmNoUXVlcnkgKz0gYCZyb3V0ZT0ke3JvdXRlfWA7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuaXNDb25uZWN0ZWQpIHtcbiAgICAgIHRoaXMucHJvcHMuZGlzY29ubmVjdEFwcCgpO1xuICAgICAgdGhpcy5wcm9wcy5zZXRNb2RlKE1PREVTLlZJRVcpO1xuICAgICAgdGhpcy5wcm9wcy5zZXRIZWFkZXJzKFtdKTtcbiAgICAgIC8vIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgLy8gXHRjdXN0b21IZWFkZXJzOiBbeyBrZXk6ICcnLCB2YWx1ZTogJycgfV0sXG4gICAgICAvLyBcdGFwcG5hbWU6ICcnLFxuICAgICAgLy8gXHR1cmw6ICcnLFxuICAgICAgLy8gfSk7XG4gICAgICB0aGlzLnByb3BzLmhpc3RvcnkucHVzaCh7XG4gICAgICAgIHNlYXJjaDogbm9ybWFsaXplU2VhcmNoUXVlcnkoc2VhcmNoUXVlcnkpLFxuICAgICAgfSk7XG4gICAgICAvLyB3aW5kb3cubG9jYXRpb24ucmVsb2FkKHRydWUpO1xuICAgIH0gZWxzZSBpZiAoYXBwbmFtZSAmJiB1cmwpIHtcbiAgICAgIGlmIChzaG91bGRDb25uZWN0KHBhdGhuYW1lLCBhcHBuYW1lKSkge1xuICAgICAgICB0aGlzLnByb3BzLmNvbm5lY3RBcHAoYXBwbmFtZSwgdXJsKTtcbiAgICAgICAgdGhpcy5wcm9wcy5zZXRIZWFkZXJzKGN1c3RvbUhlYWRlcnMpO1xuICAgICAgICAvLyB1cGRhdGUgaGlzdG9yeSB3aXRoIGNvcnJlY3QgYXBwbmFtZSBhbmQgdXJsXG4gICAgICAgIHNlYXJjaFF1ZXJ5ICs9IGAmYXBwbmFtZT0ke2FwcG5hbWV9JnVybD0ke3VybH0mbW9kZT0ke3RoaXMucHJvcHMubW9kZX1gO1xuICAgICAgICBjb25zdCB7IHBhc3RBcHBzIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBjb25zdCBuZXdBcHBzID0gWy4uLnBhc3RBcHBzXTtcblxuICAgICAgICBjb25zdCBwYXN0QXBwID0gcGFzdEFwcHMuZmluZChhcHAgPT4gYXBwLmFwcG5hbWUgPT09IGFwcG5hbWUpO1xuXG4gICAgICAgIGlmICghcGFzdEFwcCkge1xuICAgICAgICAgIG5ld0FwcHMucHVzaCh7XG4gICAgICAgICAgICBhcHBuYW1lLFxuICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgaGVhZGVyczogY3VzdG9tSGVhZGVycy5maWx0ZXIoXG4gICAgICAgICAgICAgIGl0ZW0gPT4gaXRlbS5rZXkudHJpbSgpICYmIGl0ZW0udmFsdWUudHJpbSgpXG4gICAgICAgICAgICApLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGFwcEluZGV4ID0gbmV3QXBwcy5maW5kSW5kZXgoaXRlbSA9PiBpdGVtLmFwcG5hbWUgPT09IGFwcG5hbWUpO1xuXG4gICAgICAgICAgbmV3QXBwc1thcHBJbmRleF0gPSB7XG4gICAgICAgICAgICBhcHBuYW1lLFxuICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgaGVhZGVyczogY3VzdG9tSGVhZGVycy5maWx0ZXIoXG4gICAgICAgICAgICAgIGl0ZW0gPT4gaXRlbS5rZXkudHJpbSgpICYmIGl0ZW0udmFsdWUudHJpbSgpXG4gICAgICAgICAgICApLFxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBwYXN0QXBwczogbmV3QXBwcyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc2V0TG9jYWxTdG9yYWdlRGF0YShcbiAgICAgICAgICBMT0NBTF9DT05ORUNUSU9OUyxcbiAgICAgICAgICBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBwYXN0QXBwczogbmV3QXBwcyxcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnByb3BzLmhpc3RvcnkucHVzaCh7XG4gICAgICAgICAgc2VhcmNoOiBub3JtYWxpemVTZWFyY2hRdWVyeShzZWFyY2hRdWVyeSksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmlzSGlkZGVuKSB7XG4gICAgICAgICAgdGhpcy5zZXRBcHBTd2l0Y2hlcihmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucHJvcHMuc2V0RXJyb3Ioe1xuICAgICAgICAgIG1lc3NhZ2U6ICdTb3JyeSBjYW4gbm90IGNvbm5lY3QgdG8gdGhlIGFwcCB3aXRoIG11bHRpcGxlIGluZGV4ZXMnLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnUGxlYXNlIHRyeSB1c2luZyBzaW5nbGUgaW5kZXgnLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgaGFuZGxlVXJsVG9nZ2xlID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoKHsgaXNVcmxIaWRkZW4gfSkgPT4gKHtcbiAgICAgIGlzVXJsSGlkZGVuOiAhaXNVcmxIaWRkZW4sXG4gICAgfSkpO1xuICB9O1xuXG4gIHRvZ2dsZUhlYWRlcnNNb2RhbCA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKCh7IGlzU2hvd2luZ0hlYWRlcnNNb2RhbCB9KSA9PiAoe1xuICAgICAgaXNTaG93aW5nSGVhZGVyc01vZGFsOiAhaXNTaG93aW5nSGVhZGVyc01vZGFsLFxuICAgIH0pKTtcbiAgfTtcblxuICBoYW5kbGVIZWFkZXJJdGVtQ2hhbmdlID0gKGUsIGluZGV4LCBmaWVsZCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHRhcmdldDogeyB2YWx1ZSB9LFxuICAgIH0gPSBlO1xuICAgIGNvbnN0IHsgY3VzdG9tSGVhZGVycyB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY3VzdG9tSGVhZGVyczogW1xuICAgICAgICAuLi5jdXN0b21IZWFkZXJzLnNsaWNlKDAsIGluZGV4KSxcbiAgICAgICAge1xuICAgICAgICAgIC4uLmN1c3RvbUhlYWRlcnNbaW5kZXhdLFxuICAgICAgICAgIFtmaWVsZF06IHZhbHVlLFxuICAgICAgICB9LFxuICAgICAgICAuLi5jdXN0b21IZWFkZXJzLnNsaWNlKGluZGV4ICsgMSksXG4gICAgICBdLFxuICAgIH0pO1xuICB9O1xuXG4gIGhhbmRsZUhlYWRlcnNTdWJtaXQgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBjdXN0b21IZWFkZXJzIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgY29uc3QgZmlsdGVyZWRIZWFkZXJzID0gY3VzdG9tSGVhZGVycy5maWx0ZXIoXG4gICAgICBpdGVtID0+IGl0ZW0ua2V5LnRyaW0oKSAmJiBpdGVtLnZhbHVlLnRyaW0oKVxuICAgICk7XG5cbiAgICBjb25zdCB7IGlzQ29ubmVjdGVkIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKGlzQ29ubmVjdGVkKSB7XG4gICAgICBjb25zdCB7IHBhc3RBcHBzIH0gPSBKU09OLnBhcnNlKGdldExvY2FsU3RvcmFnZUl0ZW0oTE9DQUxfQ09OTkVDVElPTlMpKTtcblxuICAgICAgY29uc3QgY3VycmVudEFwcCA9IHBhc3RBcHBzLmZpbmRJbmRleChcbiAgICAgICAgaXRlbSA9PiBpdGVtLmFwcG5hbWUgPT09IHRoaXMucHJvcHMuYXBwbmFtZVxuICAgICAgKTtcbiAgICAgIHBhc3RBcHBzW2N1cnJlbnRBcHBdLmhlYWRlcnMgPSBmaWx0ZXJlZEhlYWRlcnM7XG5cbiAgICAgIHNldExvY2FsU3RvcmFnZURhdGEoTE9DQUxfQ09OTkVDVElPTlMsIEpTT04uc3RyaW5naWZ5KHsgcGFzdEFwcHMgfSkpO1xuICAgIH1cbiAgICB0aGlzLnByb3BzLnNldEhlYWRlcnMoZmlsdGVyZWRIZWFkZXJzKTtcbiAgICB0aGlzLnRvZ2dsZUhlYWRlcnNNb2RhbCgpO1xuICB9O1xuXG4gIGhhbmRsZUhlYWRlckFmdGVyQ2xvc2UgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjdXN0b21IZWFkZXJzOiB0aGlzLnByb3BzLmhlYWRlcnMubGVuZ3RoXG4gICAgICAgID8gdGhpcy5wcm9wcy5oZWFkZXJzXG4gICAgICAgIDogW3sga2V5OiAnJywgdmFsdWU6ICcnIH1dLFxuICAgIH0pO1xuICB9O1xuXG4gIGFkZE1vcmVIZWFkZXIgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBjdXN0b21IZWFkZXJzIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjdXN0b21IZWFkZXJzOiBbLi4uY3VzdG9tSGVhZGVycywgeyBrZXk6ICcnLCB2YWx1ZTogJycgfV0sXG4gICAgfSk7XG4gIH07XG5cbiAgaGFuZGxlUmVtb3ZlSGVhZGVyID0gaW5kZXggPT4ge1xuICAgIGNvbnN0IHsgY3VzdG9tSGVhZGVycyB9ID0gdGhpcy5zdGF0ZTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGN1c3RvbUhlYWRlcnM6IFtcbiAgICAgICAgLi4uY3VzdG9tSGVhZGVycy5zbGljZSgwLCBpbmRleCksXG4gICAgICAgIC4uLmN1c3RvbUhlYWRlcnMuc2xpY2UoaW5kZXggKyAxKSxcbiAgICAgIF0sXG4gICAgfSk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGFwcG5hbWUsXG4gICAgICB1cmwsXG4gICAgICBwYXN0QXBwcyxcbiAgICAgIGlzU2hvd2luZ0FwcFN3aXRjaGVyLFxuICAgICAgaXNVcmxIaWRkZW4sXG4gICAgICBpc1Nob3dpbmdIZWFkZXJzTW9kYWwsXG4gICAgICBjdXN0b21IZWFkZXJzLFxuICAgIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHsgaXNMb2FkaW5nLCBpc0Nvbm5lY3RlZCB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICB7aXNTaG93aW5nQXBwU3dpdGNoZXIgJiYgKFxuICAgICAgICAgIDxGb3JtIGxheW91dD1cImlubGluZVwiIG9uU3VibWl0PXt0aGlzLmhhbmRsZVN1Ym1pdH0+XG4gICAgICAgICAgICA8RmxleCBhbGlnbkl0ZW1zPVwiY2VudGVyXCI+XG4gICAgICAgICAgICAgIDxJdGVtIHsuLi5mb3JtSXRlbVByb3BzfSBjc3M9e3sgW21lZGlhTWluLm1lZGl1bV06IHsgZmxleDogMSB9IH19PlxuICAgICAgICAgICAgICAgIDxHcm91cCBjb21wYWN0IGNzcz17eyBkaXNwbGF5OiAnZmxleCAhaW1wb3J0YW50JyB9fT5cbiAgICAgICAgICAgICAgICAgIDxJbnB1dFxuICAgICAgICAgICAgICAgICAgICBuYW1lPVwidXJsXCJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3VybH1cbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJVUkwgZm9yIGNsdXN0ZXIgZ29lcyBoZXJlLiBlLmcuICBodHRwczovL3VzZXJuYW1lOnBhc3N3b3JkQHNjYWxyLmFwaS5hcHBiYXNlLmlvXCJcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17aXNDb25uZWN0ZWR9XG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkXG4gICAgICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOlxuICAgICAgICAgICAgICAgICAgICAgICAgaXNVcmxIaWRkZW4gJiYgaXNDb25uZWN0ZWQgJiYgJ3RyYW5zcGFyZW50ICFpbXBvcnRhbnQnLFxuICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICAgICAgICAgICAgICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJyNkOWQ5ZDkgIWltcG9ydGFudCcsXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVVcmxUb2dnbGV9XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDxpXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgZmEgJHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVXJsSGlkZGVuID8gJ2ZhLWV5ZS1zbGFzaCcgOiAnZmEtZXllJ1xuICAgICAgICAgICAgICAgICAgICAgIH1gfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgICAgICAnJjpob3Zlcic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiAnI2Q5ZDlkOSAhaW1wb3J0YW50JyxcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnRvZ2dsZUhlYWRlcnNNb2RhbH1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgSGVhZGVyc1xuICAgICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgICAgPC9Hcm91cD5cbiAgICAgICAgICAgICAgPC9JdGVtPlxuICAgICAgICAgICAgICA8SXRlbVxuICAgICAgICAgICAgICAgIHsuLi5mb3JtSXRlbVByb3BzfVxuICAgICAgICAgICAgICAgIGNzcz17eyBbbWVkaWFNaW4ubWVkaXVtXTogeyBmbGV4OiAwLjM1IH0gfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxBdXRvQ29tcGxldGVcbiAgICAgICAgICAgICAgICAgIGRhdGFTb3VyY2U9e3Bhc3RBcHBzLm1hcChhcHAgPT4gYXBwLmFwcG5hbWUpfVxuICAgICAgICAgICAgICAgICAgdmFsdWU9e2FwcG5hbWV9XG4gICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkFwcG5hbWUgKGFrYSBpbmRleCkgZ29lcyBoZXJlXCJcbiAgICAgICAgICAgICAgICAgIGZpbHRlck9wdGlvbj17KGlucHV0VmFsdWUsIG9wdGlvbikgPT5cbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uLnByb3BzLmNoaWxkcmVuXG4gICAgICAgICAgICAgICAgICAgICAgLnRvVXBwZXJDYXNlKClcbiAgICAgICAgICAgICAgICAgICAgICAuaW5kZXhPZihpbnB1dFZhbHVlLnRvVXBwZXJDYXNlKCkpICE9PSAtMVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQXBwTmFtZUNoYW5nZX1cbiAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtpc0Nvbm5lY3RlZH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L0l0ZW0+XG5cbiAgICAgICAgICAgICAgPEl0ZW0gY3NzPXt7IG1hcmdpblJpZ2h0OiAnMHB4ICFpbXBvcnRhbnQnIH19PlxuICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgIHR5cGU9e2lzQ29ubmVjdGVkID8gJ2RhbmdlcicgOiAncHJpbWFyeSd9XG4gICAgICAgICAgICAgICAgICBodG1sVHlwZT1cInN1Ym1pdFwiXG4gICAgICAgICAgICAgICAgICBpY29uPXtpc0Nvbm5lY3RlZCA/ICdwYXVzZS1jaXJjbGUnIDogJ3BsYXktY2lyY2xlJ31cbiAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXshKGFwcG5hbWUgJiYgdXJsKX1cbiAgICAgICAgICAgICAgICAgIGxvYWRpbmc9e2lzTG9hZGluZ31cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7aXNDb25uZWN0ZWQgPyAnRGlzY29ubmVjdCcgOiAnQ29ubmVjdCd9XG4gICAgICAgICAgICAgICAgPC9CdXR0b24+XG4gICAgICAgICAgICAgIDwvSXRlbT5cbiAgICAgICAgICAgICAgPE1vZGFsXG4gICAgICAgICAgICAgICAgdmlzaWJsZT17aXNTaG93aW5nSGVhZGVyc01vZGFsfVxuICAgICAgICAgICAgICAgIG9uQ2FuY2VsPXt0aGlzLnRvZ2dsZUhlYWRlcnNNb2RhbH1cbiAgICAgICAgICAgICAgICBvbk9rPXt0aGlzLmhhbmRsZUhlYWRlcnNTdWJtaXR9XG4gICAgICAgICAgICAgICAgbWFza0Nsb3NhYmxlPXtmYWxzZX1cbiAgICAgICAgICAgICAgICBkZXN0cm95T25DbG9zZVxuICAgICAgICAgICAgICAgIHRpdGxlPVwiQWRkIEN1c3RvbSBIZWFkZXJzXCJcbiAgICAgICAgICAgICAgICBjc3M9e3sgdG9wOiAxMCB9fVxuICAgICAgICAgICAgICAgIGNsb3NhYmxlPXtmYWxzZX1cbiAgICAgICAgICAgICAgICBhZnRlckNsb3NlPXt0aGlzLmhhbmRsZUhlYWRlckFmdGVyQ2xvc2V9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgICAgbWF4SGVpZ2h0OiAnNTAwcHgnLFxuICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdzogJ2F1dG8nLFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nUmlnaHQ6IDEwLFxuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8RmxleCBjc3M9e3sgbWFyZ2luQm90dG9tOiAxMCB9fT5cbiAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgICAgICAgZmxleDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IDUsXG4gICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgIEtleVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogMTAsXG4gICAgICAgICAgICAgICAgICAgICAgICBmbGV4OiAxLFxuICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICBWYWx1ZVxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDwvRmxleD5cbiAgICAgICAgICAgICAgICAgIHtjdXN0b21IZWFkZXJzLm1hcCgoaXRlbSwgaSkgPT4gKFxuICAgICAgICAgICAgICAgICAgICA8RmxleFxuICAgICAgICAgICAgICAgICAgICAgIGtleT17YGhlYWRlci0ke2l9YH0gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICAgICAgICAgICAgICAgIGNzcz17eyBtYXJnaW5Cb3R0b206IDEwIH19XG4gICAgICAgICAgICAgICAgICAgICAgYWxpZ25JdGVtcz1cImNlbnRlclwiXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZmxleDogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogNSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpdGVtLmtleX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2UgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZUhlYWRlckl0ZW1DaGFuZ2UoZSwgaSwgJ2tleScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZsZXg6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IDEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2l0ZW0udmFsdWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtlID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVIZWFkZXJJdGVtQ2hhbmdlKGUsIGksICd2YWx1ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IDEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBtaW5XaWR0aDogMTUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtjdXN0b21IZWFkZXJzLmxlbmd0aCA+IDAgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8SWNvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJjbG9zZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5oYW5kbGVSZW1vdmVIZWFkZXIoaSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9GbGV4PlxuICAgICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgaWNvbj1cInBsdXNcIlxuICAgICAgICAgICAgICAgICAgdHlwZT1cInByaW1hcnlcIlxuICAgICAgICAgICAgICAgICAgY3NzPXt7IG1hcmdpblRvcDogMTAsIG1hcmdpbkxlZnQ6IDUgfX1cbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuYWRkTW9yZUhlYWRlcn1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L01vZGFsPlxuICAgICAgICAgICAgPC9GbGV4PlxuICAgICAgICAgIDwvRm9ybT5cbiAgICAgICAgKX1cbiAgICAgICAgeyFpc0xvYWRpbmcgJiYgIWlzQ29ubmVjdGVkICYmIChcbiAgICAgICAgICA8QWxlcnRcbiAgICAgICAgICAgIHR5cGU9XCJpbmZvXCJcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uPXtcbiAgICAgICAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICA8aDMgc3R5bGU9e3sgbWFyZ2luVG9wOiAnMXJlbScgfX0+Q29ubmVjdGlvbiBUaXBzPC9oMz5cbiAgICAgICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgIFlvdSBjYW4gY29ubmVjdCB0byBhbGwgaW5kaWNlcyBieSBwYXNzaW5nIGFueycgJ31cbiAgICAgICAgICAgICAgICAgICAgICA8Y29kZT4qPC9jb2RlPiBpbiB0aGUgYXBwIG5hbWUgaW5wdXQgZmllbGQuXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICBZb3UgY2FuIGFsc28gY29ubmVjdCB0byBhIHNpbmdsZSBpbmRleCBvciBtdWx0aXBsZSBpbmRpY2VzXG4gICAgICAgICAgICAgICAgICAgICAgYnkgcGFzc2luZyB0aGVtIGFzIGNvbW1hIHNlcGFyYXRlZCB2YWx1ZXM6IGUuZy5cbiAgICAgICAgICAgICAgICAgICAgICBpbmRleDEsaW5kZXgyLGluZGV4My5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgIEF2b2lkIHVzaW5nIGEgdHJhaWxpbmcgc2xhc2ggPGNvZGU+LzwvY29kZT4gYWZ0ZXIgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgY2x1c3RlciBhZGRyZXNzLlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgWW91ciBjbHVzdGVyIG5lZWRzIHRvIGhhdmUgQ09SUyBlbmFibGVkIGZvciB0aGUgb3JpZ2luXG4gICAgICAgICAgICAgICAgICAgICAgd2hlcmUgRGVqYXZ1IGlzIHJ1bm5pbmcuIFNlZSBiZWxvdyBmb3IgbW9yZSBvbiB0aGF0LlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICAgIDxoMz5DT1JTIFNldHRpbmdzPC9oMz5cbiAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICBUbyBtYWtlIHN1cmUgeW91IGhhdmUgZW5hYmxlZCBDT1JTIHNldHRpbmdzIGZvciB5b3VyXG4gICAgICAgICAgICAgICAgICAgIEVsYXN0aWNTZWFyY2ggaW5zdGFuY2UsIGFkZCB0aGUgZm9sbG93aW5nIGxpbmVzIGluIHRoZSBFU1xuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9uIGZpbGU6XG4gICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICA8cHJlPlxuICAgICAgICAgICAgICAgICAgICB7YGh0dHAucG9ydDogOTIwMFxuaHR0cC5jb3JzLmFsbG93LW9yaWdpbjogaHR0cDovL2xvY2FsaG9zdDoxMzU4LGh0dHA6Ly8xMjcuMC4wLjE6MTM1OFxuaHR0cC5jb3JzLmVuYWJsZWQ6IHRydWVcbmh0dHAuY29ycy5hbGxvdy1oZWFkZXJzIDogWC1SZXF1ZXN0ZWQtV2l0aCxYLUF1dGgtVG9rZW4sQ29udGVudC1UeXBlLENvbnRlbnQtTGVuZ3RoLEF1dGhvcml6YXRpb25cbmh0dHAuY29ycy5hbGxvdy1jcmVkZW50aWFsczogdHJ1ZWB9XG4gICAgICAgICAgICAgICAgICA8L3ByZT5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXt7IG1hcmdpblRvcDogJzJyZW0nIH19PlxuICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgIElmIHlvdSBhcmUgcnVubmluZyBFbGFzdGljU2VhcmNoIHZpYSBEb2NrZXIsIHVzZSB0aGVcbiAgICAgICAgICAgICAgICAgICAgZm9sbG93aW5nIGNvbW1hbmQ6XG4gICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJyNmZWZlZmUnLFxuICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6ICc4cHgnLFxuICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8Y29kZT5cbiAgICAgICAgICAgICAgICAgICAgICBkb2NrZXIgcnVuIC0tbmFtZSBlcyAtZCAtcCA5MjAwOjkyMDAgLWUgaHR0cC5wb3J0PTkyMDAgLWVcbiAgICAgICAgICAgICAgICAgICAgICBodHRwLmNvcnMuZW5hYmxlZD10cnVlIC1lXG4gICAgICAgICAgICAgICAgICAgICAgaHR0cC5jb3JzLmFsbG93LW9yaWdpbj1odHRwOi8vbG9jYWxob3N0OjEzNTgsaHR0cDovLzEyNy4wLjAuMToxMzU4XG4gICAgICAgICAgICAgICAgICAgICAgLWVcbiAgICAgICAgICAgICAgICAgICAgICBodHRwLmNvcnMuYWxsb3ctaGVhZGVycz1YLVJlcXVlc3RlZC1XaXRoLFgtQXV0aC1Ub2tlbixDb250ZW50LVR5cGUsQ29udGVudC1MZW5ndGgsQXV0aG9yaXphdGlvblxuICAgICAgICAgICAgICAgICAgICAgIC1lIGh0dHAuY29ycy5hbGxvdy1jcmVkZW50aWFscz10cnVlXG4gICAgICAgICAgICAgICAgICAgICAgZG9ja2VyLmVsYXN0aWMuY28vZWxhc3RpY3NlYXJjaC9lbGFzdGljc2VhcmNoLW9zczo2LjcuMlxuICAgICAgICAgICAgICAgICAgICA8L2NvZGU+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDxwIHN0eWxlPXt7IG1hcmdpblRvcDogJzE0cHgnIH19PlxuICAgICAgICAgICAgICAgICAgICBPciB0aGUgZm9sbG93aW5nIGlmIHlvdSBhcmUgdXNpbmcgdjcgRWxhc3RpY1NlYXJjaDpcbiAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAnI2ZlZmVmZScsXG4gICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogJzhweCcsXG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDxjb2RlPlxuICAgICAgICAgICAgICAgICAgICAgIGRvY2tlciBydW4gLWQgLS1ybSAtLW5hbWUgZWxhc3RpY3NlYXJjaCAtcCA5MjAwOjkyMDAgLXBcbiAgICAgICAgICAgICAgICAgICAgICA5MzAwOjkzMDAgLWUgZGlzY292ZXJ5LnR5cGU9c2luZ2xlLW5vZGUgLWVcbiAgICAgICAgICAgICAgICAgICAgICBodHRwLmNvcnMuZW5hYmxlZD10cnVlIC1lXG4gICAgICAgICAgICAgICAgICAgICAgaHR0cC5jb3JzLmFsbG93LW9yaWdpbj1odHRwOi8vbG9jYWxob3N0OjEzNTgsaHR0cDovLzEyNy4wLjAuMToxMzU4XG4gICAgICAgICAgICAgICAgICAgICAgLWVcbiAgICAgICAgICAgICAgICAgICAgICBodHRwLmNvcnMuYWxsb3ctaGVhZGVycz1YLVJlcXVlc3RlZC1XaXRoLFgtQXV0aC1Ub2tlbixDb250ZW50LVR5cGUsQ29udGVudC1MZW5ndGgsQXV0aG9yaXphdGlvblxuICAgICAgICAgICAgICAgICAgICAgIC1lIGh0dHAuY29ycy5hbGxvdy1jcmVkZW50aWFscz10cnVlXG4gICAgICAgICAgICAgICAgICAgICAgZG9ja2VyLmVsYXN0aWMuY28vZWxhc3RpY3NlYXJjaC9lbGFzdGljc2VhcmNoLW9zczo3LjAuMVxuICAgICAgICAgICAgICAgICAgICA8L2NvZGU+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSBzdGF0ZSA9PiAoe1xuICBhcHBuYW1lOiBnZXRBcHBuYW1lKHN0YXRlKSxcbiAgdXJsOiBnZXRVcmwoc3RhdGUpLFxuICBpc0Nvbm5lY3RlZDogZ2V0SXNDb25uZWN0ZWQoc3RhdGUpLFxuICBpc0xvYWRpbmc6IGdldElzTG9hZGluZyhzdGF0ZSksXG4gIG1vZGU6IGdldE1vZGUoc3RhdGUpLFxuICBoZWFkZXJzOiBnZXRIZWFkZXJzKHN0YXRlKSxcbn0pO1xuXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSB7XG4gIGNvbm5lY3RBcHAsXG4gIGRpc2Nvbm5lY3RBcHAsXG4gIHNldE1vZGUsXG4gIHNldEVycm9yLFxuICBzZXRIZWFkZXJzLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChcbiAgbWFwU3RhdGVUb1Byb3BzLFxuICBtYXBEaXNwYXRjaFRvUHJvcHNcbikoQ29ubmVjdEFwcCk7XG4iXX0= */")
    }, _react.default.createElement(_input.default, {
      name: "url",
      value: url,
      placeholder: "URL for cluster goes here. e.g.  https://username:password@scalr.api.appbase.io",
      onChange: this.handleChange,
      disabled: isConnected,
      required: true,
      className: (0, _emotion.css)({
        color: isUrlHidden && isConnected && 'transparent !important'
      }, "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
    }), _react.default.createElement(_button.default, {
      className: (0, _emotion.css)({
        cursor: 'pointer',
        '&:hover': {
          borderColor: '#d9d9d9 !important'
        }
      }, "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
      onClick: this.handleUrlToggle
    }, _react.default.createElement("i", {
      className: "fa ".concat(isUrlHidden ? 'fa-eye-slash' : 'fa-eye')
    })), _react.default.createElement(_button.default, {
      type: "button",
      className: (0, _emotion.css)({
        '&:hover': {
          borderColor: '#d9d9d9 !important'
        }
      }, "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
      onClick: this.toggleHeadersModal
    }, "Headers"))), _react.default.createElement(Item, _extends({}, formItemProps, {
      className: (0, _emotion.css)({
        [_media.mediaMin.medium]: {
          flex: 0.35
        }
      }, "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
    }), _react.default.createElement(_autoComplete.default, {
      dataSource: pastApps.map(app => app.appname),
      value: appname,
      placeholder: "Appname (aka index) goes here",
      filterOption: (inputValue, option) => option.props.children.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1,
      onChange: this.handleAppNameChange,
      disabled: isConnected
    })), _react.default.createElement(Item, {
      className: (0, _emotion.css)({
        marginRight: '0px !important'
      }, "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
    }, _react.default.createElement(_button.default, {
      type: isConnected ? 'danger' : 'primary',
      htmlType: "submit",
      icon: isConnected ? 'pause-circle' : 'play-circle',
      disabled: !(appname && url),
      loading: isLoading
    }, isConnected ? 'Disconnect' : 'Connect')), _react.default.createElement(_modal.default, {
      visible: isShowingHeadersModal,
      onCancel: this.toggleHeadersModal,
      onOk: this.handleHeadersSubmit,
      maskClosable: false,
      destroyOnClose: true,
      title: "Add Custom Headers",
      className: (0, _emotion.css)({
        top: 10
      }, "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
      closable: false,
      afterClose: this.handleHeaderAfterClose
    }, _react.default.createElement("div", {
      className: (0, _emotion.css)({
        maxHeight: '500px',
        overflow: 'auto',
        paddingRight: 10
      }, "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
    }, _react.default.createElement(_Flex.default, {
      className: (0, _emotion.css)({
        marginBottom: 10
      }, "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
    }, _react.default.createElement("div", {
      className: (0, _emotion.css)({
        flex: 1,
        marginLeft: 5
      }, "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
    }, "Key"), _react.default.createElement("div", {
      className: (0, _emotion.css)({
        marginLeft: 10,
        flex: 1
      }, "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
    }, "Value")), customHeaders.map((item, i) => _react.default.createElement(_Flex.default, {
      key: "header-".concat(i) // eslint-disable-line
      ,
      className: (0, _emotion.css)({
        marginBottom: 10
      }, "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"),
      alignItems: "center"
    }, _react.default.createElement("div", {
      className: (0, _emotion.css)({
        flex: 1,
        marginLeft: 5
      }, "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
    }, _react.default.createElement(_input.default, {
      value: item.key,
      onChange: e => this.handleHeaderItemChange(e, i, 'key')
    })), _react.default.createElement("div", {
      className: (0, _emotion.css)({
        flex: 1,
        marginLeft: 10
      }, "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0Nvbm5lY3RBcHAvQ29ubmVjdEFwcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFnakJ3QiIsImZpbGUiOiIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Db25uZWN0QXBwL0Nvbm5lY3RBcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRm9ybSwgQnV0dG9uLCBBbGVydCwgQXV0b0NvbXBsZXRlLCBJbnB1dCwgTW9kYWwsIEljb24gfSBmcm9tICdhbnRkJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBvYmplY3QgfSBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IG1lZGlhTWluIH0gZnJvbSAnQGRpdnlhbnNodTAxMy9tZWRpYSc7XG5cbmltcG9ydCB7XG4gIGdldEFwcG5hbWUsXG4gIGdldFVybCxcbiAgZ2V0SXNMb2FkaW5nLFxuICBnZXRJc0Nvbm5lY3RlZCxcbiAgZ2V0SGVhZGVycyxcbn0gZnJvbSAnLi4vLi4vcmVkdWNlcnMvYXBwJztcbmltcG9ydCB7XG4gIGNvbm5lY3RBcHAsXG4gIGRpc2Nvbm5lY3RBcHAsXG4gIHNldE1vZGUsXG4gIHNldEVycm9yLFxuICBzZXRIZWFkZXJzLFxufSBmcm9tICcuLi8uLi9hY3Rpb25zJztcbmltcG9ydCB7XG4gIGdldFVybFBhcmFtcyxcbiAgZ2V0TG9jYWxTdG9yYWdlSXRlbSxcbiAgc2V0TG9jYWxTdG9yYWdlRGF0YSxcbiAgZ2V0Q3VzdG9tSGVhZGVycyxcbiAgaXNNdWx0aUluZGV4QXBwLFxuICBzYXZlQXBwVG9Mb2NhbFN0b3JhZ2UsXG4gIG5vcm1hbGl6ZVNlYXJjaFF1ZXJ5LFxufSBmcm9tICcuLi8uLi91dGlscyc7XG5cbmltcG9ydCB7IGdldE1vZGUgfSBmcm9tICcuLi8uLi9yZWR1Y2Vycy9tb2RlJztcbmltcG9ydCB7IExPQ0FMX0NPTk5FQ1RJT05TLCBNT0RFUyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5cbmltcG9ydCBGbGV4IGZyb20gJy4uL0ZsZXgnO1xuXG50eXBlIFByb3BzID0ge1xuICBhcHBuYW1lPzogc3RyaW5nLFxuICB1cmw/OiBzdHJpbmcsXG4gIGNvbm5lY3RBcHA6IChzdHJpbmcsIHN0cmluZykgPT4gdm9pZCxcbiAgZGlzY29ubmVjdEFwcDogKCkgPT4gdm9pZCxcbiAgaXNDb25uZWN0ZWQ6IGJvb2xlYW4sXG4gIGlzTG9hZGluZzogYm9vbGVhbixcbiAgZXJyb3I/OiBvYmplY3QsXG4gIGhpc3Rvcnk6IG9iamVjdCxcbiAgbW9kZTogc3RyaW5nLFxuICBzZXRNb2RlOiBzdHJpbmcgPT4gdm9pZCxcbiAgb25FcnJvckNsb3NlOiAoKSA9PiB2b2lkLFxuICBsb2NhdGlvbjogYW55LFxuICBpc0hpZGRlbj86IGJvb2xlYW4sXG4gIHNldEVycm9yOiBhbnkgPT4gdm9pZCxcbiAgaGVhZGVyczogYW55W10sXG4gIHNldEhlYWRlcnM6IGFueSA9PiB2b2lkLFxufTtcblxudHlwZSBTdGF0ZSA9IHtcbiAgYXBwbmFtZTogc3RyaW5nLFxuICB1cmw6IHN0cmluZyxcbiAgcGFzdEFwcHM6IGFueVtdLFxuICBpc1Nob3dpbmdBcHBTd2l0Y2hlcjogYm9vbGVhbixcbiAgaXNVcmxIaWRkZW46IGJvb2xlYW4sXG4gIGlzU2hvd2luZ0hlYWRlcnNNb2RhbDogYm9vbGVhbixcbiAgY3VzdG9tSGVhZGVyczogYW55W10sXG59O1xuXG5jb25zdCB7IEl0ZW0gfSA9IEZvcm07XG5jb25zdCB7IEdyb3VwIH0gPSBJbnB1dDtcblxuY29uc3QgZm9ybUl0ZW1Qcm9wcyA9IHtcbiAgd3JhcHBlckNvbDoge1xuICAgIHhzOiB7XG4gICAgICBzcGFuOiAyNCxcbiAgICB9LFxuICB9LFxufTtcblxuY29uc3QgUk9VVEVTX1dJVEhPVVRfTVVMVElQTEVfSU5ERVggPSBbJy9tYXBwaW5ncycsICcvcHJldmlldycsICcvcXVlcnknXTtcblxuY29uc3Qgc2hvdWxkQ29ubmVjdCA9IChwYXRobmFtZSwgYXBwbmFtZSkgPT4ge1xuICBsZXQgaXNDb25uZWN0aW5nID0gZmFsc2U7XG5cbiAgaWYgKFJPVVRFU19XSVRIT1VUX01VTFRJUExFX0lOREVYLmluZGV4T2YocGF0aG5hbWUpID09PSAtMSkge1xuICAgIGlzQ29ubmVjdGluZyA9IHRydWU7XG4gIH0gZWxzZSBpZiAoIWlzTXVsdGlJbmRleEFwcChhcHBuYW1lKSkge1xuICAgIGlzQ29ubmVjdGluZyA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgaXNDb25uZWN0aW5nID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaXNDb25uZWN0aW5nO1xufTtcblxuY2xhc3MgQ29ubmVjdEFwcCBleHRlbmRzIENvbXBvbmVudDxQcm9wcywgU3RhdGU+IHtcbiAgc3RhdGUgPSB7XG4gICAgYXBwbmFtZTogdGhpcy5wcm9wcy5hcHBuYW1lIHx8ICcnLFxuICAgIHVybDogdGhpcy5wcm9wcy51cmwgfHwgJycsXG4gICAgcGFzdEFwcHM6IFtdLFxuICAgIGlzU2hvd2luZ0FwcFN3aXRjaGVyOiB0cnVlLFxuICAgIGlzVXJsSGlkZGVuOiBmYWxzZSxcbiAgICBpc1Nob3dpbmdIZWFkZXJzTW9kYWw6IGZhbHNlLFxuICAgIGN1c3RvbUhlYWRlcnM6IHRoaXMucHJvcHMuaGVhZGVycy5sZW5ndGhcbiAgICAgID8gdGhpcy5wcm9wcy5oZWFkZXJzXG4gICAgICA6IFt7IGtleTogJycsIHZhbHVlOiAnJyB9XSxcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAvLyBzeW5jIHN0YXRlIGZyb20gdXJsXG4gICAgbGV0IGFwcG5hbWUgPSAnJztcbiAgICBsZXQgdXJsID0gJyc7XG4gICAgY29uc3QgeyBtb2RlLCBpc0Nvbm5lY3RlZCwgaXNIaWRkZW4gfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qge1xuICAgICAgYXBwbmFtZTogcXVlcnlBcHAsXG4gICAgICB1cmw6IHF1ZXJ5VXJsLFxuICAgICAgbW9kZTogcXVlcnlNb2RlLFxuICAgICAgc2lkZWJhcixcbiAgICAgIGZvb3RlcixcbiAgICAgIGFwcHN3aXRjaGVyLFxuICAgICAgcm91dGUsXG4gICAgfSA9IGdldFVybFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcblxuICAgIGlmIChxdWVyeUFwcCAmJiBxdWVyeVVybCkge1xuICAgICAgYXBwbmFtZSA9IHF1ZXJ5QXBwO1xuICAgICAgdXJsID0gcXVlcnlVcmw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHsgYXBwbmFtZTogcHJvcEFwcCwgdXJsOiBwcm9wVXJsIH0gPSB0aGlzLnByb3BzO1xuICAgICAgYXBwbmFtZSA9IHByb3BBcHAgfHwgJyc7XG4gICAgICB1cmwgPSBwcm9wVXJsIHx8ICcnO1xuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgYXBwbmFtZSxcbiAgICAgIHVybCxcbiAgICB9KTtcblxuICAgIGlmIChhcHBuYW1lICYmIHVybCAmJiAhaXNDb25uZWN0ZWQpIHtcbiAgICAgIGNvbnN0IHsgcGF0aG5hbWUgfSA9IHRoaXMucHJvcHMubG9jYXRpb247XG5cbiAgICAgIGlmIChzaG91bGRDb25uZWN0KHBhdGhuYW1lLCBhcHBuYW1lKSkge1xuICAgICAgICB0aGlzLnByb3BzLmNvbm5lY3RBcHAoYXBwbmFtZSwgdXJsKTtcbiAgICAgICAgc2F2ZUFwcFRvTG9jYWxTdG9yYWdlKGFwcG5hbWUsIHVybCk7XG5cbiAgICAgICAgaWYgKGlzSGlkZGVuKSB7XG4gICAgICAgICAgdGhpcy5zZXRBcHBTd2l0Y2hlcihmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucHJvcHMuc2V0RXJyb3Ioe1xuICAgICAgICAgIG1lc3NhZ2U6ICdTb3JyeSBjYW4gbm90IGNvbm5lY3QgdG8gdGhlIGFwcCB3aXRoIG11bHRpcGxlIGluZGV4ZXMnLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnUGxlYXNlIHRyeSB1c2luZyBzaW5nbGUgaW5kZXgnLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNDb25uZWN0ZWQgJiYgaXNIaWRkZW4pIHtcbiAgICAgIHRoaXMuc2V0QXBwU3dpdGNoZXIoZmFsc2UpO1xuICAgIH1cblxuICAgIGlmICghcXVlcnlBcHAgJiYgIXF1ZXJ5VXJsKSB7XG4gICAgICBsZXQgc2VhcmNoUXVlcnkgPSBgP2FwcG5hbWU9JHthcHBuYW1lfSZ1cmw9JHt1cmx9YDtcbiAgICAgIGNvbnN0IGN1cnJlbnRNb2RlID0gcXVlcnlNb2RlIHx8IG1vZGU7XG4gICAgICBzZWFyY2hRdWVyeSArPSBgJm1vZGU9JHtjdXJyZW50TW9kZX1gO1xuXG4gICAgICBpZiAoc2lkZWJhcikge1xuICAgICAgICBzZWFyY2hRdWVyeSArPSBgJnNpZGViYXI9JHtzaWRlYmFyfWA7XG4gICAgICB9XG5cbiAgICAgIGlmIChmb290ZXIpIHtcbiAgICAgICAgc2VhcmNoUXVlcnkgKz0gYCZmb290ZXI9JHtmb290ZXJ9YDtcbiAgICAgIH1cblxuICAgICAgaWYgKGFwcHN3aXRjaGVyKSB7XG4gICAgICAgIHNlYXJjaFF1ZXJ5ICs9IGAmYXBwc3dpdGNoZXI9JHthcHBzd2l0Y2hlcn1gO1xuICAgICAgfVxuXG4gICAgICBpZiAocm91dGUpIHtcbiAgICAgICAgc2VhcmNoUXVlcnkgKz0gYCZyb3V0ZT0ke3JvdXRlfWA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucHJvcHMuc2V0TW9kZShjdXJyZW50TW9kZSk7XG4gICAgICB0aGlzLnByb3BzLmhpc3RvcnkucHVzaCh7XG4gICAgICAgIHNlYXJjaDogbm9ybWFsaXplU2VhcmNoUXVlcnkoc2VhcmNoUXVlcnkpLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHF1ZXJ5TW9kZSkge1xuICAgICAgdGhpcy5wcm9wcy5zZXRNb2RlKHF1ZXJ5TW9kZSk7XG4gICAgfVxuXG4gICAgaWYgKGFwcHN3aXRjaGVyICYmIGFwcHN3aXRjaGVyID09PSAnZmFsc2UnKSB7XG4gICAgICB0aGlzLnNldEFwcFN3aXRjaGVyKGZhbHNlKTtcbiAgICB9XG5cbiAgICBjb25zdCBjdXN0b21IZWFkZXJzID0gZ2V0Q3VzdG9tSGVhZGVycyhhcHBuYW1lKTtcbiAgICB0aGlzLnByb3BzLnNldEhlYWRlcnMoY3VzdG9tSGVhZGVycyk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjdXN0b21IZWFkZXJzOiBjdXN0b21IZWFkZXJzLmxlbmd0aFxuICAgICAgICA/IGN1c3RvbUhlYWRlcnNcbiAgICAgICAgOiBbeyBrZXk6ICcnLCB2YWx1ZTogJycgfV0sXG4gICAgfSk7XG4gICAgdGhpcy5zZXRQYXN0Q29ubmVjdGlvbnMoKTtcbiAgfVxuXG4gIHNldEFwcFN3aXRjaGVyID0gaXNTaG93aW5nQXBwU3dpdGNoZXIgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaXNTaG93aW5nQXBwU3dpdGNoZXIsXG4gICAgfSk7XG4gIH07XG5cbiAgc2V0UGFzdENvbm5lY3Rpb25zID0gKCkgPT4ge1xuICAgIGNvbnN0IHBhc3RDb25uZWN0aW9ucyA9IEpTT04ucGFyc2UoXG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICBnZXRMb2NhbFN0b3JhZ2VJdGVtKExPQ0FMX0NPTk5FQ1RJT05TKSB8fCB7fVxuICAgICk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHBhc3RBcHBzOiAocGFzdENvbm5lY3Rpb25zIHx8IHt9KS5wYXN0QXBwcyB8fCBbXSxcbiAgICB9KTtcbiAgfTtcblxuICBoYW5kbGVDaGFuZ2UgPSBlID0+IHtcbiAgICBjb25zdCB7IHZhbHVlLCBuYW1lIH0gPSBlLnRhcmdldDtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIFtuYW1lXTogdmFsdWUsXG4gICAgfSk7XG4gIH07XG5cbiAgaGFuZGxlQXBwTmFtZUNoYW5nZSA9IGFwcG5hbWUgPT4ge1xuICAgIGNvbnN0IHsgcGFzdEFwcHMgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgcGFzdEFwcCA9IHBhc3RBcHBzLmZpbmQoYXBwID0+IGFwcC5hcHBuYW1lID09PSBhcHBuYW1lKTtcblxuICAgIGlmIChwYXN0QXBwKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgdXJsOiBwYXN0QXBwLnVybCxcbiAgICAgICAgY3VzdG9tSGVhZGVyczogcGFzdEFwcC5oZWFkZXJzIHx8IFtdLFxuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgYXBwbmFtZSxcbiAgICB9KTtcbiAgfTtcblxuICBoYW5kbGVTdWJtaXQgPSBlID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgeyBhcHBuYW1lLCB1cmwsIGN1c3RvbUhlYWRlcnMgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgeyBzaWRlYmFyLCBhcHBzd2l0Y2hlciwgZm9vdGVyLCByb3V0ZSB9ID0gZ2V0VXJsUGFyYW1zKFxuICAgICAgd2luZG93LmxvY2F0aW9uLnNlYXJjaFxuICAgICk7XG4gICAgY29uc3QgeyBwYXRobmFtZSB9ID0gdGhpcy5wcm9wcy5sb2NhdGlvbjtcblxuICAgIGxldCBzZWFyY2hRdWVyeSA9ICc/JztcblxuICAgIGlmIChzaWRlYmFyKSB7XG4gICAgICBzZWFyY2hRdWVyeSArPSBgJnNpZGViYXI9JHtzaWRlYmFyfWA7XG4gICAgfVxuXG4gICAgaWYgKGZvb3Rlcikge1xuICAgICAgc2VhcmNoUXVlcnkgKz0gYCZzaWRlYmFyPSR7Zm9vdGVyfWA7XG4gICAgfVxuXG4gICAgaWYgKGFwcHN3aXRjaGVyKSB7XG4gICAgICBzZWFyY2hRdWVyeSArPSBgJmFwcHN3aXRjaGVyPSR7YXBwc3dpdGNoZXJ9YDtcbiAgICB9XG5cbiAgICBpZiAocm91dGUpIHtcbiAgICAgIHNlYXJjaFF1ZXJ5ICs9IGAmcm91dGU9JHtyb3V0ZX1gO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmlzQ29ubmVjdGVkKSB7XG4gICAgICB0aGlzLnByb3BzLmRpc2Nvbm5lY3RBcHAoKTtcbiAgICAgIHRoaXMucHJvcHMuc2V0TW9kZShNT0RFUy5WSUVXKTtcbiAgICAgIHRoaXMucHJvcHMuc2V0SGVhZGVycyhbXSk7XG4gICAgICAvLyB0aGlzLnNldFN0YXRlKHtcbiAgICAgIC8vIFx0Y3VzdG9tSGVhZGVyczogW3sga2V5OiAnJywgdmFsdWU6ICcnIH1dLFxuICAgICAgLy8gXHRhcHBuYW1lOiAnJyxcbiAgICAgIC8vIFx0dXJsOiAnJyxcbiAgICAgIC8vIH0pO1xuICAgICAgdGhpcy5wcm9wcy5oaXN0b3J5LnB1c2goe1xuICAgICAgICBzZWFyY2g6IG5vcm1hbGl6ZVNlYXJjaFF1ZXJ5KHNlYXJjaFF1ZXJ5KSxcbiAgICAgIH0pO1xuICAgICAgLy8gd2luZG93LmxvY2F0aW9uLnJlbG9hZCh0cnVlKTtcbiAgICB9IGVsc2UgaWYgKGFwcG5hbWUgJiYgdXJsKSB7XG4gICAgICBpZiAoc2hvdWxkQ29ubmVjdChwYXRobmFtZSwgYXBwbmFtZSkpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5jb25uZWN0QXBwKGFwcG5hbWUsIHVybCk7XG4gICAgICAgIHRoaXMucHJvcHMuc2V0SGVhZGVycyhjdXN0b21IZWFkZXJzKTtcbiAgICAgICAgLy8gdXBkYXRlIGhpc3Rvcnkgd2l0aCBjb3JyZWN0IGFwcG5hbWUgYW5kIHVybFxuICAgICAgICBzZWFyY2hRdWVyeSArPSBgJmFwcG5hbWU9JHthcHBuYW1lfSZ1cmw9JHt1cmx9Jm1vZGU9JHt0aGlzLnByb3BzLm1vZGV9YDtcbiAgICAgICAgY29uc3QgeyBwYXN0QXBwcyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgY29uc3QgbmV3QXBwcyA9IFsuLi5wYXN0QXBwc107XG5cbiAgICAgICAgY29uc3QgcGFzdEFwcCA9IHBhc3RBcHBzLmZpbmQoYXBwID0+IGFwcC5hcHBuYW1lID09PSBhcHBuYW1lKTtcblxuICAgICAgICBpZiAoIXBhc3RBcHApIHtcbiAgICAgICAgICBuZXdBcHBzLnB1c2goe1xuICAgICAgICAgICAgYXBwbmFtZSxcbiAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgIGhlYWRlcnM6IGN1c3RvbUhlYWRlcnMuZmlsdGVyKFxuICAgICAgICAgICAgICBpdGVtID0+IGl0ZW0ua2V5LnRyaW0oKSAmJiBpdGVtLnZhbHVlLnRyaW0oKVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBhcHBJbmRleCA9IG5ld0FwcHMuZmluZEluZGV4KGl0ZW0gPT4gaXRlbS5hcHBuYW1lID09PSBhcHBuYW1lKTtcblxuICAgICAgICAgIG5ld0FwcHNbYXBwSW5kZXhdID0ge1xuICAgICAgICAgICAgYXBwbmFtZSxcbiAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgIGhlYWRlcnM6IGN1c3RvbUhlYWRlcnMuZmlsdGVyKFxuICAgICAgICAgICAgICBpdGVtID0+IGl0ZW0ua2V5LnRyaW0oKSAmJiBpdGVtLnZhbHVlLnRyaW0oKVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgcGFzdEFwcHM6IG5ld0FwcHMsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNldExvY2FsU3RvcmFnZURhdGEoXG4gICAgICAgICAgTE9DQUxfQ09OTkVDVElPTlMsXG4gICAgICAgICAgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgcGFzdEFwcHM6IG5ld0FwcHMsXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5wcm9wcy5oaXN0b3J5LnB1c2goe1xuICAgICAgICAgIHNlYXJjaDogbm9ybWFsaXplU2VhcmNoUXVlcnkoc2VhcmNoUXVlcnkpLFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGhpcy5wcm9wcy5pc0hpZGRlbikge1xuICAgICAgICAgIHRoaXMuc2V0QXBwU3dpdGNoZXIoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnByb3BzLnNldEVycm9yKHtcbiAgICAgICAgICBtZXNzYWdlOiAnU29ycnkgY2FuIG5vdCBjb25uZWN0IHRvIHRoZSBhcHAgd2l0aCBtdWx0aXBsZSBpbmRleGVzJyxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ1BsZWFzZSB0cnkgdXNpbmcgc2luZ2xlIGluZGV4JyxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGhhbmRsZVVybFRvZ2dsZSA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKCh7IGlzVXJsSGlkZGVuIH0pID0+ICh7XG4gICAgICBpc1VybEhpZGRlbjogIWlzVXJsSGlkZGVuLFxuICAgIH0pKTtcbiAgfTtcblxuICB0b2dnbGVIZWFkZXJzTW9kYWwgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSgoeyBpc1Nob3dpbmdIZWFkZXJzTW9kYWwgfSkgPT4gKHtcbiAgICAgIGlzU2hvd2luZ0hlYWRlcnNNb2RhbDogIWlzU2hvd2luZ0hlYWRlcnNNb2RhbCxcbiAgICB9KSk7XG4gIH07XG5cbiAgaGFuZGxlSGVhZGVySXRlbUNoYW5nZSA9IChlLCBpbmRleCwgZmllbGQpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICB0YXJnZXQ6IHsgdmFsdWUgfSxcbiAgICB9ID0gZTtcbiAgICBjb25zdCB7IGN1c3RvbUhlYWRlcnMgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGN1c3RvbUhlYWRlcnM6IFtcbiAgICAgICAgLi4uY3VzdG9tSGVhZGVycy5zbGljZSgwLCBpbmRleCksXG4gICAgICAgIHtcbiAgICAgICAgICAuLi5jdXN0b21IZWFkZXJzW2luZGV4XSxcbiAgICAgICAgICBbZmllbGRdOiB2YWx1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgLi4uY3VzdG9tSGVhZGVycy5zbGljZShpbmRleCArIDEpLFxuICAgICAgXSxcbiAgICB9KTtcbiAgfTtcblxuICBoYW5kbGVIZWFkZXJzU3VibWl0ID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgY3VzdG9tSGVhZGVycyB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IGZpbHRlcmVkSGVhZGVycyA9IGN1c3RvbUhlYWRlcnMuZmlsdGVyKFxuICAgICAgaXRlbSA9PiBpdGVtLmtleS50cmltKCkgJiYgaXRlbS52YWx1ZS50cmltKClcbiAgICApO1xuXG4gICAgY29uc3QgeyBpc0Nvbm5lY3RlZCB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmIChpc0Nvbm5lY3RlZCkge1xuICAgICAgY29uc3QgeyBwYXN0QXBwcyB9ID0gSlNPTi5wYXJzZShnZXRMb2NhbFN0b3JhZ2VJdGVtKExPQ0FMX0NPTk5FQ1RJT05TKSk7XG5cbiAgICAgIGNvbnN0IGN1cnJlbnRBcHAgPSBwYXN0QXBwcy5maW5kSW5kZXgoXG4gICAgICAgIGl0ZW0gPT4gaXRlbS5hcHBuYW1lID09PSB0aGlzLnByb3BzLmFwcG5hbWVcbiAgICAgICk7XG4gICAgICBwYXN0QXBwc1tjdXJyZW50QXBwXS5oZWFkZXJzID0gZmlsdGVyZWRIZWFkZXJzO1xuXG4gICAgICBzZXRMb2NhbFN0b3JhZ2VEYXRhKExPQ0FMX0NPTk5FQ1RJT05TLCBKU09OLnN0cmluZ2lmeSh7IHBhc3RBcHBzIH0pKTtcbiAgICB9XG4gICAgdGhpcy5wcm9wcy5zZXRIZWFkZXJzKGZpbHRlcmVkSGVhZGVycyk7XG4gICAgdGhpcy50b2dnbGVIZWFkZXJzTW9kYWwoKTtcbiAgfTtcblxuICBoYW5kbGVIZWFkZXJBZnRlckNsb3NlID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY3VzdG9tSGVhZGVyczogdGhpcy5wcm9wcy5oZWFkZXJzLmxlbmd0aFxuICAgICAgICA/IHRoaXMucHJvcHMuaGVhZGVyc1xuICAgICAgICA6IFt7IGtleTogJycsIHZhbHVlOiAnJyB9XSxcbiAgICB9KTtcbiAgfTtcblxuICBhZGRNb3JlSGVhZGVyID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgY3VzdG9tSGVhZGVycyB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY3VzdG9tSGVhZGVyczogWy4uLmN1c3RvbUhlYWRlcnMsIHsga2V5OiAnJywgdmFsdWU6ICcnIH1dLFxuICAgIH0pO1xuICB9O1xuXG4gIGhhbmRsZVJlbW92ZUhlYWRlciA9IGluZGV4ID0+IHtcbiAgICBjb25zdCB7IGN1c3RvbUhlYWRlcnMgfSA9IHRoaXMuc3RhdGU7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjdXN0b21IZWFkZXJzOiBbXG4gICAgICAgIC4uLmN1c3RvbUhlYWRlcnMuc2xpY2UoMCwgaW5kZXgpLFxuICAgICAgICAuLi5jdXN0b21IZWFkZXJzLnNsaWNlKGluZGV4ICsgMSksXG4gICAgICBdLFxuICAgIH0pO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBhcHBuYW1lLFxuICAgICAgdXJsLFxuICAgICAgcGFzdEFwcHMsXG4gICAgICBpc1Nob3dpbmdBcHBTd2l0Y2hlcixcbiAgICAgIGlzVXJsSGlkZGVuLFxuICAgICAgaXNTaG93aW5nSGVhZGVyc01vZGFsLFxuICAgICAgY3VzdG9tSGVhZGVycyxcbiAgICB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IGlzTG9hZGluZywgaXNDb25uZWN0ZWQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAge2lzU2hvd2luZ0FwcFN3aXRjaGVyICYmIChcbiAgICAgICAgICA8Rm9ybSBsYXlvdXQ9XCJpbmxpbmVcIiBvblN1Ym1pdD17dGhpcy5oYW5kbGVTdWJtaXR9PlxuICAgICAgICAgICAgPEZsZXggYWxpZ25JdGVtcz1cImNlbnRlclwiPlxuICAgICAgICAgICAgICA8SXRlbSB7Li4uZm9ybUl0ZW1Qcm9wc30gY3NzPXt7IFttZWRpYU1pbi5tZWRpdW1dOiB7IGZsZXg6IDEgfSB9fT5cbiAgICAgICAgICAgICAgICA8R3JvdXAgY29tcGFjdCBjc3M9e3sgZGlzcGxheTogJ2ZsZXggIWltcG9ydGFudCcgfX0+XG4gICAgICAgICAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgICAgICAgICAgbmFtZT1cInVybFwiXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXt1cmx9XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiVVJMIGZvciBjbHVzdGVyIGdvZXMgaGVyZS4gZS5nLiAgaHR0cHM6Ly91c2VybmFtZTpwYXNzd29yZEBzY2Fsci5hcGkuYXBwYmFzZS5pb1wiXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2lzQ29ubmVjdGVkfVxuICAgICAgICAgICAgICAgICAgICByZXF1aXJlZFxuICAgICAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgICAgICBjb2xvcjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVXJsSGlkZGVuICYmIGlzQ29ubmVjdGVkICYmICd0cmFuc3BhcmVudCAhaW1wb3J0YW50JyxcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICcjZDlkOWQ5ICFpbXBvcnRhbnQnLFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlVXJsVG9nZ2xlfVxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8aVxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YGZhICR7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc1VybEhpZGRlbiA/ICdmYS1leWUtc2xhc2gnIDogJ2ZhLWV5ZSdcbiAgICAgICAgICAgICAgICAgICAgICB9YH1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJyNkOWQ5ZDkgIWltcG9ydGFudCcsXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy50b2dnbGVIZWFkZXJzTW9kYWx9XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIEhlYWRlcnNcbiAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvR3JvdXA+XG4gICAgICAgICAgICAgIDwvSXRlbT5cbiAgICAgICAgICAgICAgPEl0ZW1cbiAgICAgICAgICAgICAgICB7Li4uZm9ybUl0ZW1Qcm9wc31cbiAgICAgICAgICAgICAgICBjc3M9e3sgW21lZGlhTWluLm1lZGl1bV06IHsgZmxleDogMC4zNSB9IH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8QXV0b0NvbXBsZXRlXG4gICAgICAgICAgICAgICAgICBkYXRhU291cmNlPXtwYXN0QXBwcy5tYXAoYXBwID0+IGFwcC5hcHBuYW1lKX1cbiAgICAgICAgICAgICAgICAgIHZhbHVlPXthcHBuYW1lfVxuICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJBcHBuYW1lIChha2EgaW5kZXgpIGdvZXMgaGVyZVwiXG4gICAgICAgICAgICAgICAgICBmaWx0ZXJPcHRpb249eyhpbnB1dFZhbHVlLCBvcHRpb24pID0+XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbi5wcm9wcy5jaGlsZHJlblxuICAgICAgICAgICAgICAgICAgICAgIC50b1VwcGVyQ2FzZSgpXG4gICAgICAgICAgICAgICAgICAgICAgLmluZGV4T2YoaW5wdXRWYWx1ZS50b1VwcGVyQ2FzZSgpKSAhPT0gLTFcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUFwcE5hbWVDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICBkaXNhYmxlZD17aXNDb25uZWN0ZWR9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9JdGVtPlxuXG4gICAgICAgICAgICAgIDxJdGVtIGNzcz17eyBtYXJnaW5SaWdodDogJzBweCAhaW1wb3J0YW50JyB9fT5cbiAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICB0eXBlPXtpc0Nvbm5lY3RlZCA/ICdkYW5nZXInIDogJ3ByaW1hcnknfVxuICAgICAgICAgICAgICAgICAgaHRtbFR5cGU9XCJzdWJtaXRcIlxuICAgICAgICAgICAgICAgICAgaWNvbj17aXNDb25uZWN0ZWQgPyAncGF1c2UtY2lyY2xlJyA6ICdwbGF5LWNpcmNsZSd9XG4gICAgICAgICAgICAgICAgICBkaXNhYmxlZD17IShhcHBuYW1lICYmIHVybCl9XG4gICAgICAgICAgICAgICAgICBsb2FkaW5nPXtpc0xvYWRpbmd9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAge2lzQ29ubmVjdGVkID8gJ0Rpc2Nvbm5lY3QnIDogJ0Nvbm5lY3QnfVxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICA8L0l0ZW0+XG4gICAgICAgICAgICAgIDxNb2RhbFxuICAgICAgICAgICAgICAgIHZpc2libGU9e2lzU2hvd2luZ0hlYWRlcnNNb2RhbH1cbiAgICAgICAgICAgICAgICBvbkNhbmNlbD17dGhpcy50b2dnbGVIZWFkZXJzTW9kYWx9XG4gICAgICAgICAgICAgICAgb25Paz17dGhpcy5oYW5kbGVIZWFkZXJzU3VibWl0fVxuICAgICAgICAgICAgICAgIG1hc2tDbG9zYWJsZT17ZmFsc2V9XG4gICAgICAgICAgICAgICAgZGVzdHJveU9uQ2xvc2VcbiAgICAgICAgICAgICAgICB0aXRsZT1cIkFkZCBDdXN0b20gSGVhZGVyc1wiXG4gICAgICAgICAgICAgICAgY3NzPXt7IHRvcDogMTAgfX1cbiAgICAgICAgICAgICAgICBjbG9zYWJsZT17ZmFsc2V9XG4gICAgICAgICAgICAgICAgYWZ0ZXJDbG9zZT17dGhpcy5oYW5kbGVIZWFkZXJBZnRlckNsb3NlfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICAgIG1heEhlaWdodDogJzUwMHB4JyxcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3c6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZ1JpZ2h0OiAxMCxcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPEZsZXggY3NzPXt7IG1hcmdpbkJvdHRvbTogMTAgfX0+XG4gICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsZXg6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiA1LFxuICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICBLZXlcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IDEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmxleDogMSxcbiAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgVmFsdWVcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICA8L0ZsZXg+XG4gICAgICAgICAgICAgICAgICB7Y3VzdG9tSGVhZGVycy5tYXAoKGl0ZW0sIGkpID0+IChcbiAgICAgICAgICAgICAgICAgICAgPEZsZXhcbiAgICAgICAgICAgICAgICAgICAgICBrZXk9e2BoZWFkZXItJHtpfWB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgICAgICAgICAgICAgICBjc3M9e3sgbWFyZ2luQm90dG9tOiAxMCB9fVxuICAgICAgICAgICAgICAgICAgICAgIGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZsZXg6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IDUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aXRlbS5rZXl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtlID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVIZWFkZXJJdGVtQ2hhbmdlKGUsIGksICdrZXknKVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgICAgICAgICBmbGV4OiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiAxMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpdGVtLnZhbHVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17ZSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlSGVhZGVySXRlbUNoYW5nZShlLCBpLCAndmFsdWUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiAxMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbWluV2lkdGg6IDE1LFxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICB7Y3VzdG9tSGVhZGVycy5sZW5ndGggPiAwICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPEljb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiY2xvc2VcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuaGFuZGxlUmVtb3ZlSGVhZGVyKGkpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvRmxleD5cbiAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgIGljb249XCJwbHVzXCJcbiAgICAgICAgICAgICAgICAgIHR5cGU9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgICAgICAgIGNzcz17eyBtYXJnaW5Ub3A6IDEwLCBtYXJnaW5MZWZ0OiA1IH19XG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmFkZE1vcmVIZWFkZXJ9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9Nb2RhbD5cbiAgICAgICAgICAgIDwvRmxleD5cbiAgICAgICAgICA8L0Zvcm0+XG4gICAgICAgICl9XG4gICAgICAgIHshaXNMb2FkaW5nICYmICFpc0Nvbm5lY3RlZCAmJiAoXG4gICAgICAgICAgPEFsZXJ0XG4gICAgICAgICAgICB0eXBlPVwiaW5mb1wiXG4gICAgICAgICAgICBkZXNjcmlwdGlvbj17XG4gICAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgPGgzIHN0eWxlPXt7IG1hcmdpblRvcDogJzFyZW0nIH19PkNvbm5lY3Rpb24gVGlwczwvaDM+XG4gICAgICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICBZb3UgY2FuIGNvbm5lY3QgdG8gYWxsIGluZGljZXMgYnkgcGFzc2luZyBhbnsnICd9XG4gICAgICAgICAgICAgICAgICAgICAgPGNvZGU+KjwvY29kZT4gaW4gdGhlIGFwcCBuYW1lIGlucHV0IGZpZWxkLlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgWW91IGNhbiBhbHNvIGNvbm5lY3QgdG8gYSBzaW5nbGUgaW5kZXggb3IgbXVsdGlwbGUgaW5kaWNlc1xuICAgICAgICAgICAgICAgICAgICAgIGJ5IHBhc3NpbmcgdGhlbSBhcyBjb21tYSBzZXBhcmF0ZWQgdmFsdWVzOiBlLmcuXG4gICAgICAgICAgICAgICAgICAgICAgaW5kZXgxLGluZGV4MixpbmRleDMuXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICBBdm9pZCB1c2luZyBhIHRyYWlsaW5nIHNsYXNoIDxjb2RlPi88L2NvZGU+IGFmdGVyIHRoZVxuICAgICAgICAgICAgICAgICAgICAgIGNsdXN0ZXIgYWRkcmVzcy5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgIFlvdXIgY2x1c3RlciBuZWVkcyB0byBoYXZlIENPUlMgZW5hYmxlZCBmb3IgdGhlIG9yaWdpblxuICAgICAgICAgICAgICAgICAgICAgIHdoZXJlIERlamF2dSBpcyBydW5uaW5nLiBTZWUgYmVsb3cgZm9yIG1vcmUgb24gdGhhdC5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgICA8aDM+Q09SUyBTZXR0aW5nczwvaDM+XG4gICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgVG8gbWFrZSBzdXJlIHlvdSBoYXZlIGVuYWJsZWQgQ09SUyBzZXR0aW5ncyBmb3IgeW91clxuICAgICAgICAgICAgICAgICAgICBFbGFzdGljU2VhcmNoIGluc3RhbmNlLCBhZGQgdGhlIGZvbGxvd2luZyBsaW5lcyBpbiB0aGUgRVNcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbiBmaWxlOlxuICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgPHByZT5cbiAgICAgICAgICAgICAgICAgICAge2BodHRwLnBvcnQ6IDkyMDBcbmh0dHAuY29ycy5hbGxvdy1vcmlnaW46IGh0dHA6Ly9sb2NhbGhvc3Q6MTM1OCxodHRwOi8vMTI3LjAuMC4xOjEzNThcbmh0dHAuY29ycy5lbmFibGVkOiB0cnVlXG5odHRwLmNvcnMuYWxsb3ctaGVhZGVycyA6IFgtUmVxdWVzdGVkLVdpdGgsWC1BdXRoLVRva2VuLENvbnRlbnQtVHlwZSxDb250ZW50LUxlbmd0aCxBdXRob3JpemF0aW9uXG5odHRwLmNvcnMuYWxsb3ctY3JlZGVudGlhbHM6IHRydWVgfVxuICAgICAgICAgICAgICAgICAgPC9wcmU+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17eyBtYXJnaW5Ub3A6ICcycmVtJyB9fT5cbiAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICBJZiB5b3UgYXJlIHJ1bm5pbmcgRWxhc3RpY1NlYXJjaCB2aWEgRG9ja2VyLCB1c2UgdGhlXG4gICAgICAgICAgICAgICAgICAgIGZvbGxvd2luZyBjb21tYW5kOlxuICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICcjZmVmZWZlJyxcbiAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAnOHB4JyxcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPGNvZGU+XG4gICAgICAgICAgICAgICAgICAgICAgZG9ja2VyIHJ1biAtLW5hbWUgZXMgLWQgLXAgOTIwMDo5MjAwIC1lIGh0dHAucG9ydD05MjAwIC1lXG4gICAgICAgICAgICAgICAgICAgICAgaHR0cC5jb3JzLmVuYWJsZWQ9dHJ1ZSAtZVxuICAgICAgICAgICAgICAgICAgICAgIGh0dHAuY29ycy5hbGxvdy1vcmlnaW49aHR0cDovL2xvY2FsaG9zdDoxMzU4LGh0dHA6Ly8xMjcuMC4wLjE6MTM1OFxuICAgICAgICAgICAgICAgICAgICAgIC1lXG4gICAgICAgICAgICAgICAgICAgICAgaHR0cC5jb3JzLmFsbG93LWhlYWRlcnM9WC1SZXF1ZXN0ZWQtV2l0aCxYLUF1dGgtVG9rZW4sQ29udGVudC1UeXBlLENvbnRlbnQtTGVuZ3RoLEF1dGhvcml6YXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAtZSBodHRwLmNvcnMuYWxsb3ctY3JlZGVudGlhbHM9dHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgIGRvY2tlci5lbGFzdGljLmNvL2VsYXN0aWNzZWFyY2gvZWxhc3RpY3NlYXJjaC1vc3M6Ni43LjJcbiAgICAgICAgICAgICAgICAgICAgPC9jb2RlPlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICA8cCBzdHlsZT17eyBtYXJnaW5Ub3A6ICcxNHB4JyB9fT5cbiAgICAgICAgICAgICAgICAgICAgT3IgdGhlIGZvbGxvd2luZyBpZiB5b3UgYXJlIHVzaW5nIHY3IEVsYXN0aWNTZWFyY2g6XG4gICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJyNmZWZlZmUnLFxuICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6ICc4cHgnLFxuICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8Y29kZT5cbiAgICAgICAgICAgICAgICAgICAgICBkb2NrZXIgcnVuIC1kIC0tcm0gLS1uYW1lIGVsYXN0aWNzZWFyY2ggLXAgOTIwMDo5MjAwIC1wXG4gICAgICAgICAgICAgICAgICAgICAgOTMwMDo5MzAwIC1lIGRpc2NvdmVyeS50eXBlPXNpbmdsZS1ub2RlIC1lXG4gICAgICAgICAgICAgICAgICAgICAgaHR0cC5jb3JzLmVuYWJsZWQ9dHJ1ZSAtZVxuICAgICAgICAgICAgICAgICAgICAgIGh0dHAuY29ycy5hbGxvdy1vcmlnaW49aHR0cDovL2xvY2FsaG9zdDoxMzU4LGh0dHA6Ly8xMjcuMC4wLjE6MTM1OFxuICAgICAgICAgICAgICAgICAgICAgIC1lXG4gICAgICAgICAgICAgICAgICAgICAgaHR0cC5jb3JzLmFsbG93LWhlYWRlcnM9WC1SZXF1ZXN0ZWQtV2l0aCxYLUF1dGgtVG9rZW4sQ29udGVudC1UeXBlLENvbnRlbnQtTGVuZ3RoLEF1dGhvcml6YXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAtZSBodHRwLmNvcnMuYWxsb3ctY3JlZGVudGlhbHM9dHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgIGRvY2tlci5lbGFzdGljLmNvL2VsYXN0aWNzZWFyY2gvZWxhc3RpY3NlYXJjaC1vc3M6Ny4wLjFcbiAgICAgICAgICAgICAgICAgICAgPC9jb2RlPlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICB9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gc3RhdGUgPT4gKHtcbiAgYXBwbmFtZTogZ2V0QXBwbmFtZShzdGF0ZSksXG4gIHVybDogZ2V0VXJsKHN0YXRlKSxcbiAgaXNDb25uZWN0ZWQ6IGdldElzQ29ubmVjdGVkKHN0YXRlKSxcbiAgaXNMb2FkaW5nOiBnZXRJc0xvYWRpbmcoc3RhdGUpLFxuICBtb2RlOiBnZXRNb2RlKHN0YXRlKSxcbiAgaGVhZGVyczogZ2V0SGVhZGVycyhzdGF0ZSksXG59KTtcblxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0ge1xuICBjb25uZWN0QXBwLFxuICBkaXNjb25uZWN0QXBwLFxuICBzZXRNb2RlLFxuICBzZXRFcnJvcixcbiAgc2V0SGVhZGVycyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXG4gIG1hcFN0YXRlVG9Qcm9wcyxcbiAgbWFwRGlzcGF0Y2hUb1Byb3BzXG4pKENvbm5lY3RBcHApO1xuIl19 */")
    }, _react.default.createElement(_input.default, {
      value: item.value,
      onChange: e => this.handleHeaderItemChange(e, i, 'value')
    })), _react.default.createElement("div", {
      className: (0, _emotion.css)({
        marginLeft: 10,
        minWidth: 15
      }, "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
    }, customHeaders.length > 0 && _react.default.createElement(_icon.default, {
      type: "close",
      onClick: () => this.handleRemoveHeader(i),
      className: (0, _emotion.css)({
        cursor: 'pointer'
      }, "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
    }))))), _react.default.createElement(_button.default, {
      icon: "plus",
      type: "primary",
      className: (0, _emotion.css)({
        marginTop: 10,
        marginLeft: 5
      }, "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0Nvbm5lY3RBcHAvQ29ubmVjdEFwcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrbEJrQiIsImZpbGUiOiIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Db25uZWN0QXBwL0Nvbm5lY3RBcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBAZmxvd1xuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRm9ybSwgQnV0dG9uLCBBbGVydCwgQXV0b0NvbXBsZXRlLCBJbnB1dCwgTW9kYWwsIEljb24gfSBmcm9tICdhbnRkJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBvYmplY3QgfSBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IG1lZGlhTWluIH0gZnJvbSAnQGRpdnlhbnNodTAxMy9tZWRpYSc7XG5cbmltcG9ydCB7XG4gIGdldEFwcG5hbWUsXG4gIGdldFVybCxcbiAgZ2V0SXNMb2FkaW5nLFxuICBnZXRJc0Nvbm5lY3RlZCxcbiAgZ2V0SGVhZGVycyxcbn0gZnJvbSAnLi4vLi4vcmVkdWNlcnMvYXBwJztcbmltcG9ydCB7XG4gIGNvbm5lY3RBcHAsXG4gIGRpc2Nvbm5lY3RBcHAsXG4gIHNldE1vZGUsXG4gIHNldEVycm9yLFxuICBzZXRIZWFkZXJzLFxufSBmcm9tICcuLi8uLi9hY3Rpb25zJztcbmltcG9ydCB7XG4gIGdldFVybFBhcmFtcyxcbiAgZ2V0TG9jYWxTdG9yYWdlSXRlbSxcbiAgc2V0TG9jYWxTdG9yYWdlRGF0YSxcbiAgZ2V0Q3VzdG9tSGVhZGVycyxcbiAgaXNNdWx0aUluZGV4QXBwLFxuICBzYXZlQXBwVG9Mb2NhbFN0b3JhZ2UsXG4gIG5vcm1hbGl6ZVNlYXJjaFF1ZXJ5LFxufSBmcm9tICcuLi8uLi91dGlscyc7XG5cbmltcG9ydCB7IGdldE1vZGUgfSBmcm9tICcuLi8uLi9yZWR1Y2Vycy9tb2RlJztcbmltcG9ydCB7IExPQ0FMX0NPTk5FQ1RJT05TLCBNT0RFUyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7XG5cbmltcG9ydCBGbGV4IGZyb20gJy4uL0ZsZXgnO1xuXG50eXBlIFByb3BzID0ge1xuICBhcHBuYW1lPzogc3RyaW5nLFxuICB1cmw/OiBzdHJpbmcsXG4gIGNvbm5lY3RBcHA6IChzdHJpbmcsIHN0cmluZykgPT4gdm9pZCxcbiAgZGlzY29ubmVjdEFwcDogKCkgPT4gdm9pZCxcbiAgaXNDb25uZWN0ZWQ6IGJvb2xlYW4sXG4gIGlzTG9hZGluZzogYm9vbGVhbixcbiAgZXJyb3I/OiBvYmplY3QsXG4gIGhpc3Rvcnk6IG9iamVjdCxcbiAgbW9kZTogc3RyaW5nLFxuICBzZXRNb2RlOiBzdHJpbmcgPT4gdm9pZCxcbiAgb25FcnJvckNsb3NlOiAoKSA9PiB2b2lkLFxuICBsb2NhdGlvbjogYW55LFxuICBpc0hpZGRlbj86IGJvb2xlYW4sXG4gIHNldEVycm9yOiBhbnkgPT4gdm9pZCxcbiAgaGVhZGVyczogYW55W10sXG4gIHNldEhlYWRlcnM6IGFueSA9PiB2b2lkLFxufTtcblxudHlwZSBTdGF0ZSA9IHtcbiAgYXBwbmFtZTogc3RyaW5nLFxuICB1cmw6IHN0cmluZyxcbiAgcGFzdEFwcHM6IGFueVtdLFxuICBpc1Nob3dpbmdBcHBTd2l0Y2hlcjogYm9vbGVhbixcbiAgaXNVcmxIaWRkZW46IGJvb2xlYW4sXG4gIGlzU2hvd2luZ0hlYWRlcnNNb2RhbDogYm9vbGVhbixcbiAgY3VzdG9tSGVhZGVyczogYW55W10sXG59O1xuXG5jb25zdCB7IEl0ZW0gfSA9IEZvcm07XG5jb25zdCB7IEdyb3VwIH0gPSBJbnB1dDtcblxuY29uc3QgZm9ybUl0ZW1Qcm9wcyA9IHtcbiAgd3JhcHBlckNvbDoge1xuICAgIHhzOiB7XG4gICAgICBzcGFuOiAyNCxcbiAgICB9LFxuICB9LFxufTtcblxuY29uc3QgUk9VVEVTX1dJVEhPVVRfTVVMVElQTEVfSU5ERVggPSBbJy9tYXBwaW5ncycsICcvcHJldmlldycsICcvcXVlcnknXTtcblxuY29uc3Qgc2hvdWxkQ29ubmVjdCA9IChwYXRobmFtZSwgYXBwbmFtZSkgPT4ge1xuICBsZXQgaXNDb25uZWN0aW5nID0gZmFsc2U7XG5cbiAgaWYgKFJPVVRFU19XSVRIT1VUX01VTFRJUExFX0lOREVYLmluZGV4T2YocGF0aG5hbWUpID09PSAtMSkge1xuICAgIGlzQ29ubmVjdGluZyA9IHRydWU7XG4gIH0gZWxzZSBpZiAoIWlzTXVsdGlJbmRleEFwcChhcHBuYW1lKSkge1xuICAgIGlzQ29ubmVjdGluZyA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgaXNDb25uZWN0aW5nID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaXNDb25uZWN0aW5nO1xufTtcblxuY2xhc3MgQ29ubmVjdEFwcCBleHRlbmRzIENvbXBvbmVudDxQcm9wcywgU3RhdGU+IHtcbiAgc3RhdGUgPSB7XG4gICAgYXBwbmFtZTogdGhpcy5wcm9wcy5hcHBuYW1lIHx8ICcnLFxuICAgIHVybDogdGhpcy5wcm9wcy51cmwgfHwgJycsXG4gICAgcGFzdEFwcHM6IFtdLFxuICAgIGlzU2hvd2luZ0FwcFN3aXRjaGVyOiB0cnVlLFxuICAgIGlzVXJsSGlkZGVuOiBmYWxzZSxcbiAgICBpc1Nob3dpbmdIZWFkZXJzTW9kYWw6IGZhbHNlLFxuICAgIGN1c3RvbUhlYWRlcnM6IHRoaXMucHJvcHMuaGVhZGVycy5sZW5ndGhcbiAgICAgID8gdGhpcy5wcm9wcy5oZWFkZXJzXG4gICAgICA6IFt7IGtleTogJycsIHZhbHVlOiAnJyB9XSxcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAvLyBzeW5jIHN0YXRlIGZyb20gdXJsXG4gICAgbGV0IGFwcG5hbWUgPSAnJztcbiAgICBsZXQgdXJsID0gJyc7XG4gICAgY29uc3QgeyBtb2RlLCBpc0Nvbm5lY3RlZCwgaXNIaWRkZW4gfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qge1xuICAgICAgYXBwbmFtZTogcXVlcnlBcHAsXG4gICAgICB1cmw6IHF1ZXJ5VXJsLFxuICAgICAgbW9kZTogcXVlcnlNb2RlLFxuICAgICAgc2lkZWJhcixcbiAgICAgIGZvb3RlcixcbiAgICAgIGFwcHN3aXRjaGVyLFxuICAgICAgcm91dGUsXG4gICAgfSA9IGdldFVybFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcblxuICAgIGlmIChxdWVyeUFwcCAmJiBxdWVyeVVybCkge1xuICAgICAgYXBwbmFtZSA9IHF1ZXJ5QXBwO1xuICAgICAgdXJsID0gcXVlcnlVcmw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHsgYXBwbmFtZTogcHJvcEFwcCwgdXJsOiBwcm9wVXJsIH0gPSB0aGlzLnByb3BzO1xuICAgICAgYXBwbmFtZSA9IHByb3BBcHAgfHwgJyc7XG4gICAgICB1cmwgPSBwcm9wVXJsIHx8ICcnO1xuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgYXBwbmFtZSxcbiAgICAgIHVybCxcbiAgICB9KTtcblxuICAgIGlmIChhcHBuYW1lICYmIHVybCAmJiAhaXNDb25uZWN0ZWQpIHtcbiAgICAgIGNvbnN0IHsgcGF0aG5hbWUgfSA9IHRoaXMucHJvcHMubG9jYXRpb247XG5cbiAgICAgIGlmIChzaG91bGRDb25uZWN0KHBhdGhuYW1lLCBhcHBuYW1lKSkge1xuICAgICAgICB0aGlzLnByb3BzLmNvbm5lY3RBcHAoYXBwbmFtZSwgdXJsKTtcbiAgICAgICAgc2F2ZUFwcFRvTG9jYWxTdG9yYWdlKGFwcG5hbWUsIHVybCk7XG5cbiAgICAgICAgaWYgKGlzSGlkZGVuKSB7XG4gICAgICAgICAgdGhpcy5zZXRBcHBTd2l0Y2hlcihmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucHJvcHMuc2V0RXJyb3Ioe1xuICAgICAgICAgIG1lc3NhZ2U6ICdTb3JyeSBjYW4gbm90IGNvbm5lY3QgdG8gdGhlIGFwcCB3aXRoIG11bHRpcGxlIGluZGV4ZXMnLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiAnUGxlYXNlIHRyeSB1c2luZyBzaW5nbGUgaW5kZXgnLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNDb25uZWN0ZWQgJiYgaXNIaWRkZW4pIHtcbiAgICAgIHRoaXMuc2V0QXBwU3dpdGNoZXIoZmFsc2UpO1xuICAgIH1cblxuICAgIGlmICghcXVlcnlBcHAgJiYgIXF1ZXJ5VXJsKSB7XG4gICAgICBsZXQgc2VhcmNoUXVlcnkgPSBgP2FwcG5hbWU9JHthcHBuYW1lfSZ1cmw9JHt1cmx9YDtcbiAgICAgIGNvbnN0IGN1cnJlbnRNb2RlID0gcXVlcnlNb2RlIHx8IG1vZGU7XG4gICAgICBzZWFyY2hRdWVyeSArPSBgJm1vZGU9JHtjdXJyZW50TW9kZX1gO1xuXG4gICAgICBpZiAoc2lkZWJhcikge1xuICAgICAgICBzZWFyY2hRdWVyeSArPSBgJnNpZGViYXI9JHtzaWRlYmFyfWA7XG4gICAgICB9XG5cbiAgICAgIGlmIChmb290ZXIpIHtcbiAgICAgICAgc2VhcmNoUXVlcnkgKz0gYCZmb290ZXI9JHtmb290ZXJ9YDtcbiAgICAgIH1cblxuICAgICAgaWYgKGFwcHN3aXRjaGVyKSB7XG4gICAgICAgIHNlYXJjaFF1ZXJ5ICs9IGAmYXBwc3dpdGNoZXI9JHthcHBzd2l0Y2hlcn1gO1xuICAgICAgfVxuXG4gICAgICBpZiAocm91dGUpIHtcbiAgICAgICAgc2VhcmNoUXVlcnkgKz0gYCZyb3V0ZT0ke3JvdXRlfWA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucHJvcHMuc2V0TW9kZShjdXJyZW50TW9kZSk7XG4gICAgICB0aGlzLnByb3BzLmhpc3RvcnkucHVzaCh7XG4gICAgICAgIHNlYXJjaDogbm9ybWFsaXplU2VhcmNoUXVlcnkoc2VhcmNoUXVlcnkpLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHF1ZXJ5TW9kZSkge1xuICAgICAgdGhpcy5wcm9wcy5zZXRNb2RlKHF1ZXJ5TW9kZSk7XG4gICAgfVxuXG4gICAgaWYgKGFwcHN3aXRjaGVyICYmIGFwcHN3aXRjaGVyID09PSAnZmFsc2UnKSB7XG4gICAgICB0aGlzLnNldEFwcFN3aXRjaGVyKGZhbHNlKTtcbiAgICB9XG5cbiAgICBjb25zdCBjdXN0b21IZWFkZXJzID0gZ2V0Q3VzdG9tSGVhZGVycyhhcHBuYW1lKTtcbiAgICB0aGlzLnByb3BzLnNldEhlYWRlcnMoY3VzdG9tSGVhZGVycyk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjdXN0b21IZWFkZXJzOiBjdXN0b21IZWFkZXJzLmxlbmd0aFxuICAgICAgICA/IGN1c3RvbUhlYWRlcnNcbiAgICAgICAgOiBbeyBrZXk6ICcnLCB2YWx1ZTogJycgfV0sXG4gICAgfSk7XG4gICAgdGhpcy5zZXRQYXN0Q29ubmVjdGlvbnMoKTtcbiAgfVxuXG4gIHNldEFwcFN3aXRjaGVyID0gaXNTaG93aW5nQXBwU3dpdGNoZXIgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaXNTaG93aW5nQXBwU3dpdGNoZXIsXG4gICAgfSk7XG4gIH07XG5cbiAgc2V0UGFzdENvbm5lY3Rpb25zID0gKCkgPT4ge1xuICAgIGNvbnN0IHBhc3RDb25uZWN0aW9ucyA9IEpTT04ucGFyc2UoXG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICBnZXRMb2NhbFN0b3JhZ2VJdGVtKExPQ0FMX0NPTk5FQ1RJT05TKSB8fCB7fVxuICAgICk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHBhc3RBcHBzOiAocGFzdENvbm5lY3Rpb25zIHx8IHt9KS5wYXN0QXBwcyB8fCBbXSxcbiAgICB9KTtcbiAgfTtcblxuICBoYW5kbGVDaGFuZ2UgPSBlID0+IHtcbiAgICBjb25zdCB7IHZhbHVlLCBuYW1lIH0gPSBlLnRhcmdldDtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIFtuYW1lXTogdmFsdWUsXG4gICAgfSk7XG4gIH07XG5cbiAgaGFuZGxlQXBwTmFtZUNoYW5nZSA9IGFwcG5hbWUgPT4ge1xuICAgIGNvbnN0IHsgcGFzdEFwcHMgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgcGFzdEFwcCA9IHBhc3RBcHBzLmZpbmQoYXBwID0+IGFwcC5hcHBuYW1lID09PSBhcHBuYW1lKTtcblxuICAgIGlmIChwYXN0QXBwKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgdXJsOiBwYXN0QXBwLnVybCxcbiAgICAgICAgY3VzdG9tSGVhZGVyczogcGFzdEFwcC5oZWFkZXJzIHx8IFtdLFxuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgYXBwbmFtZSxcbiAgICB9KTtcbiAgfTtcblxuICBoYW5kbGVTdWJtaXQgPSBlID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgeyBhcHBuYW1lLCB1cmwsIGN1c3RvbUhlYWRlcnMgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgeyBzaWRlYmFyLCBhcHBzd2l0Y2hlciwgZm9vdGVyLCByb3V0ZSB9ID0gZ2V0VXJsUGFyYW1zKFxuICAgICAgd2luZG93LmxvY2F0aW9uLnNlYXJjaFxuICAgICk7XG4gICAgY29uc3QgeyBwYXRobmFtZSB9ID0gdGhpcy5wcm9wcy5sb2NhdGlvbjtcblxuICAgIGxldCBzZWFyY2hRdWVyeSA9ICc/JztcblxuICAgIGlmIChzaWRlYmFyKSB7XG4gICAgICBzZWFyY2hRdWVyeSArPSBgJnNpZGViYXI9JHtzaWRlYmFyfWA7XG4gICAgfVxuXG4gICAgaWYgKGZvb3Rlcikge1xuICAgICAgc2VhcmNoUXVlcnkgKz0gYCZzaWRlYmFyPSR7Zm9vdGVyfWA7XG4gICAgfVxuXG4gICAgaWYgKGFwcHN3aXRjaGVyKSB7XG4gICAgICBzZWFyY2hRdWVyeSArPSBgJmFwcHN3aXRjaGVyPSR7YXBwc3dpdGNoZXJ9YDtcbiAgICB9XG5cbiAgICBpZiAocm91dGUpIHtcbiAgICAgIHNlYXJjaFF1ZXJ5ICs9IGAmcm91dGU9JHtyb3V0ZX1gO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmlzQ29ubmVjdGVkKSB7XG4gICAgICB0aGlzLnByb3BzLmRpc2Nvbm5lY3RBcHAoKTtcbiAgICAgIHRoaXMucHJvcHMuc2V0TW9kZShNT0RFUy5WSUVXKTtcbiAgICAgIHRoaXMucHJvcHMuc2V0SGVhZGVycyhbXSk7XG4gICAgICAvLyB0aGlzLnNldFN0YXRlKHtcbiAgICAgIC8vIFx0Y3VzdG9tSGVhZGVyczogW3sga2V5OiAnJywgdmFsdWU6ICcnIH1dLFxuICAgICAgLy8gXHRhcHBuYW1lOiAnJyxcbiAgICAgIC8vIFx0dXJsOiAnJyxcbiAgICAgIC8vIH0pO1xuICAgICAgdGhpcy5wcm9wcy5oaXN0b3J5LnB1c2goe1xuICAgICAgICBzZWFyY2g6IG5vcm1hbGl6ZVNlYXJjaFF1ZXJ5KHNlYXJjaFF1ZXJ5KSxcbiAgICAgIH0pO1xuICAgICAgLy8gd2luZG93LmxvY2F0aW9uLnJlbG9hZCh0cnVlKTtcbiAgICB9IGVsc2UgaWYgKGFwcG5hbWUgJiYgdXJsKSB7XG4gICAgICBpZiAoc2hvdWxkQ29ubmVjdChwYXRobmFtZSwgYXBwbmFtZSkpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5jb25uZWN0QXBwKGFwcG5hbWUsIHVybCk7XG4gICAgICAgIHRoaXMucHJvcHMuc2V0SGVhZGVycyhjdXN0b21IZWFkZXJzKTtcbiAgICAgICAgLy8gdXBkYXRlIGhpc3Rvcnkgd2l0aCBjb3JyZWN0IGFwcG5hbWUgYW5kIHVybFxuICAgICAgICBzZWFyY2hRdWVyeSArPSBgJmFwcG5hbWU9JHthcHBuYW1lfSZ1cmw9JHt1cmx9Jm1vZGU9JHt0aGlzLnByb3BzLm1vZGV9YDtcbiAgICAgICAgY29uc3QgeyBwYXN0QXBwcyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgY29uc3QgbmV3QXBwcyA9IFsuLi5wYXN0QXBwc107XG5cbiAgICAgICAgY29uc3QgcGFzdEFwcCA9IHBhc3RBcHBzLmZpbmQoYXBwID0+IGFwcC5hcHBuYW1lID09PSBhcHBuYW1lKTtcblxuICAgICAgICBpZiAoIXBhc3RBcHApIHtcbiAgICAgICAgICBuZXdBcHBzLnB1c2goe1xuICAgICAgICAgICAgYXBwbmFtZSxcbiAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgIGhlYWRlcnM6IGN1c3RvbUhlYWRlcnMuZmlsdGVyKFxuICAgICAgICAgICAgICBpdGVtID0+IGl0ZW0ua2V5LnRyaW0oKSAmJiBpdGVtLnZhbHVlLnRyaW0oKVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBhcHBJbmRleCA9IG5ld0FwcHMuZmluZEluZGV4KGl0ZW0gPT4gaXRlbS5hcHBuYW1lID09PSBhcHBuYW1lKTtcblxuICAgICAgICAgIG5ld0FwcHNbYXBwSW5kZXhdID0ge1xuICAgICAgICAgICAgYXBwbmFtZSxcbiAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgIGhlYWRlcnM6IGN1c3RvbUhlYWRlcnMuZmlsdGVyKFxuICAgICAgICAgICAgICBpdGVtID0+IGl0ZW0ua2V5LnRyaW0oKSAmJiBpdGVtLnZhbHVlLnRyaW0oKVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgcGFzdEFwcHM6IG5ld0FwcHMsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNldExvY2FsU3RvcmFnZURhdGEoXG4gICAgICAgICAgTE9DQUxfQ09OTkVDVElPTlMsXG4gICAgICAgICAgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgcGFzdEFwcHM6IG5ld0FwcHMsXG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5wcm9wcy5oaXN0b3J5LnB1c2goe1xuICAgICAgICAgIHNlYXJjaDogbm9ybWFsaXplU2VhcmNoUXVlcnkoc2VhcmNoUXVlcnkpLFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGhpcy5wcm9wcy5pc0hpZGRlbikge1xuICAgICAgICAgIHRoaXMuc2V0QXBwU3dpdGNoZXIoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnByb3BzLnNldEVycm9yKHtcbiAgICAgICAgICBtZXNzYWdlOiAnU29ycnkgY2FuIG5vdCBjb25uZWN0IHRvIHRoZSBhcHAgd2l0aCBtdWx0aXBsZSBpbmRleGVzJyxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogJ1BsZWFzZSB0cnkgdXNpbmcgc2luZ2xlIGluZGV4JyxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGhhbmRsZVVybFRvZ2dsZSA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKCh7IGlzVXJsSGlkZGVuIH0pID0+ICh7XG4gICAgICBpc1VybEhpZGRlbjogIWlzVXJsSGlkZGVuLFxuICAgIH0pKTtcbiAgfTtcblxuICB0b2dnbGVIZWFkZXJzTW9kYWwgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSgoeyBpc1Nob3dpbmdIZWFkZXJzTW9kYWwgfSkgPT4gKHtcbiAgICAgIGlzU2hvd2luZ0hlYWRlcnNNb2RhbDogIWlzU2hvd2luZ0hlYWRlcnNNb2RhbCxcbiAgICB9KSk7XG4gIH07XG5cbiAgaGFuZGxlSGVhZGVySXRlbUNoYW5nZSA9IChlLCBpbmRleCwgZmllbGQpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICB0YXJnZXQ6IHsgdmFsdWUgfSxcbiAgICB9ID0gZTtcbiAgICBjb25zdCB7IGN1c3RvbUhlYWRlcnMgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGN1c3RvbUhlYWRlcnM6IFtcbiAgICAgICAgLi4uY3VzdG9tSGVhZGVycy5zbGljZSgwLCBpbmRleCksXG4gICAgICAgIHtcbiAgICAgICAgICAuLi5jdXN0b21IZWFkZXJzW2luZGV4XSxcbiAgICAgICAgICBbZmllbGRdOiB2YWx1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgLi4uY3VzdG9tSGVhZGVycy5zbGljZShpbmRleCArIDEpLFxuICAgICAgXSxcbiAgICB9KTtcbiAgfTtcblxuICBoYW5kbGVIZWFkZXJzU3VibWl0ID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgY3VzdG9tSGVhZGVycyB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IGZpbHRlcmVkSGVhZGVycyA9IGN1c3RvbUhlYWRlcnMuZmlsdGVyKFxuICAgICAgaXRlbSA9PiBpdGVtLmtleS50cmltKCkgJiYgaXRlbS52YWx1ZS50cmltKClcbiAgICApO1xuXG4gICAgY29uc3QgeyBpc0Nvbm5lY3RlZCB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmIChpc0Nvbm5lY3RlZCkge1xuICAgICAgY29uc3QgeyBwYXN0QXBwcyB9ID0gSlNPTi5wYXJzZShnZXRMb2NhbFN0b3JhZ2VJdGVtKExPQ0FMX0NPTk5FQ1RJT05TKSk7XG5cbiAgICAgIGNvbnN0IGN1cnJlbnRBcHAgPSBwYXN0QXBwcy5maW5kSW5kZXgoXG4gICAgICAgIGl0ZW0gPT4gaXRlbS5hcHBuYW1lID09PSB0aGlzLnByb3BzLmFwcG5hbWVcbiAgICAgICk7XG4gICAgICBwYXN0QXBwc1tjdXJyZW50QXBwXS5oZWFkZXJzID0gZmlsdGVyZWRIZWFkZXJzO1xuXG4gICAgICBzZXRMb2NhbFN0b3JhZ2VEYXRhKExPQ0FMX0NPTk5FQ1RJT05TLCBKU09OLnN0cmluZ2lmeSh7IHBhc3RBcHBzIH0pKTtcbiAgICB9XG4gICAgdGhpcy5wcm9wcy5zZXRIZWFkZXJzKGZpbHRlcmVkSGVhZGVycyk7XG4gICAgdGhpcy50b2dnbGVIZWFkZXJzTW9kYWwoKTtcbiAgfTtcblxuICBoYW5kbGVIZWFkZXJBZnRlckNsb3NlID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY3VzdG9tSGVhZGVyczogdGhpcy5wcm9wcy5oZWFkZXJzLmxlbmd0aFxuICAgICAgICA/IHRoaXMucHJvcHMuaGVhZGVyc1xuICAgICAgICA6IFt7IGtleTogJycsIHZhbHVlOiAnJyB9XSxcbiAgICB9KTtcbiAgfTtcblxuICBhZGRNb3JlSGVhZGVyID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgY3VzdG9tSGVhZGVycyB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY3VzdG9tSGVhZGVyczogWy4uLmN1c3RvbUhlYWRlcnMsIHsga2V5OiAnJywgdmFsdWU6ICcnIH1dLFxuICAgIH0pO1xuICB9O1xuXG4gIGhhbmRsZVJlbW92ZUhlYWRlciA9IGluZGV4ID0+IHtcbiAgICBjb25zdCB7IGN1c3RvbUhlYWRlcnMgfSA9IHRoaXMuc3RhdGU7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjdXN0b21IZWFkZXJzOiBbXG4gICAgICAgIC4uLmN1c3RvbUhlYWRlcnMuc2xpY2UoMCwgaW5kZXgpLFxuICAgICAgICAuLi5jdXN0b21IZWFkZXJzLnNsaWNlKGluZGV4ICsgMSksXG4gICAgICBdLFxuICAgIH0pO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBhcHBuYW1lLFxuICAgICAgdXJsLFxuICAgICAgcGFzdEFwcHMsXG4gICAgICBpc1Nob3dpbmdBcHBTd2l0Y2hlcixcbiAgICAgIGlzVXJsSGlkZGVuLFxuICAgICAgaXNTaG93aW5nSGVhZGVyc01vZGFsLFxuICAgICAgY3VzdG9tSGVhZGVycyxcbiAgICB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IGlzTG9hZGluZywgaXNDb25uZWN0ZWQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAge2lzU2hvd2luZ0FwcFN3aXRjaGVyICYmIChcbiAgICAgICAgICA8Rm9ybSBsYXlvdXQ9XCJpbmxpbmVcIiBvblN1Ym1pdD17dGhpcy5oYW5kbGVTdWJtaXR9PlxuICAgICAgICAgICAgPEZsZXggYWxpZ25JdGVtcz1cImNlbnRlclwiPlxuICAgICAgICAgICAgICA8SXRlbSB7Li4uZm9ybUl0ZW1Qcm9wc30gY3NzPXt7IFttZWRpYU1pbi5tZWRpdW1dOiB7IGZsZXg6IDEgfSB9fT5cbiAgICAgICAgICAgICAgICA8R3JvdXAgY29tcGFjdCBjc3M9e3sgZGlzcGxheTogJ2ZsZXggIWltcG9ydGFudCcgfX0+XG4gICAgICAgICAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgICAgICAgICAgbmFtZT1cInVybFwiXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXt1cmx9XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiVVJMIGZvciBjbHVzdGVyIGdvZXMgaGVyZS4gZS5nLiAgaHR0cHM6Ly91c2VybmFtZTpwYXNzd29yZEBzY2Fsci5hcGkuYXBwYmFzZS5pb1wiXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2lzQ29ubmVjdGVkfVxuICAgICAgICAgICAgICAgICAgICByZXF1aXJlZFxuICAgICAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgICAgICBjb2xvcjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVXJsSGlkZGVuICYmIGlzQ29ubmVjdGVkICYmICd0cmFuc3BhcmVudCAhaW1wb3J0YW50JyxcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICAgICAgICAgICAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICcjZDlkOWQ5ICFpbXBvcnRhbnQnLFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlVXJsVG9nZ2xlfVxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8aVxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YGZhICR7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc1VybEhpZGRlbiA/ICdmYS1leWUtc2xhc2gnIDogJ2ZhLWV5ZSdcbiAgICAgICAgICAgICAgICAgICAgICB9YH1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJyNkOWQ5ZDkgIWltcG9ydGFudCcsXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy50b2dnbGVIZWFkZXJzTW9kYWx9XG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIEhlYWRlcnNcbiAgICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvR3JvdXA+XG4gICAgICAgICAgICAgIDwvSXRlbT5cbiAgICAgICAgICAgICAgPEl0ZW1cbiAgICAgICAgICAgICAgICB7Li4uZm9ybUl0ZW1Qcm9wc31cbiAgICAgICAgICAgICAgICBjc3M9e3sgW21lZGlhTWluLm1lZGl1bV06IHsgZmxleDogMC4zNSB9IH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8QXV0b0NvbXBsZXRlXG4gICAgICAgICAgICAgICAgICBkYXRhU291cmNlPXtwYXN0QXBwcy5tYXAoYXBwID0+IGFwcC5hcHBuYW1lKX1cbiAgICAgICAgICAgICAgICAgIHZhbHVlPXthcHBuYW1lfVxuICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJBcHBuYW1lIChha2EgaW5kZXgpIGdvZXMgaGVyZVwiXG4gICAgICAgICAgICAgICAgICBmaWx0ZXJPcHRpb249eyhpbnB1dFZhbHVlLCBvcHRpb24pID0+XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbi5wcm9wcy5jaGlsZHJlblxuICAgICAgICAgICAgICAgICAgICAgIC50b1VwcGVyQ2FzZSgpXG4gICAgICAgICAgICAgICAgICAgICAgLmluZGV4T2YoaW5wdXRWYWx1ZS50b1VwcGVyQ2FzZSgpKSAhPT0gLTFcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUFwcE5hbWVDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICBkaXNhYmxlZD17aXNDb25uZWN0ZWR9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9JdGVtPlxuXG4gICAgICAgICAgICAgIDxJdGVtIGNzcz17eyBtYXJnaW5SaWdodDogJzBweCAhaW1wb3J0YW50JyB9fT5cbiAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICB0eXBlPXtpc0Nvbm5lY3RlZCA/ICdkYW5nZXInIDogJ3ByaW1hcnknfVxuICAgICAgICAgICAgICAgICAgaHRtbFR5cGU9XCJzdWJtaXRcIlxuICAgICAgICAgICAgICAgICAgaWNvbj17aXNDb25uZWN0ZWQgPyAncGF1c2UtY2lyY2xlJyA6ICdwbGF5LWNpcmNsZSd9XG4gICAgICAgICAgICAgICAgICBkaXNhYmxlZD17IShhcHBuYW1lICYmIHVybCl9XG4gICAgICAgICAgICAgICAgICBsb2FkaW5nPXtpc0xvYWRpbmd9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAge2lzQ29ubmVjdGVkID8gJ0Rpc2Nvbm5lY3QnIDogJ0Nvbm5lY3QnfVxuICAgICAgICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgICAgICA8L0l0ZW0+XG4gICAgICAgICAgICAgIDxNb2RhbFxuICAgICAgICAgICAgICAgIHZpc2libGU9e2lzU2hvd2luZ0hlYWRlcnNNb2RhbH1cbiAgICAgICAgICAgICAgICBvbkNhbmNlbD17dGhpcy50b2dnbGVIZWFkZXJzTW9kYWx9XG4gICAgICAgICAgICAgICAgb25Paz17dGhpcy5oYW5kbGVIZWFkZXJzU3VibWl0fVxuICAgICAgICAgICAgICAgIG1hc2tDbG9zYWJsZT17ZmFsc2V9XG4gICAgICAgICAgICAgICAgZGVzdHJveU9uQ2xvc2VcbiAgICAgICAgICAgICAgICB0aXRsZT1cIkFkZCBDdXN0b20gSGVhZGVyc1wiXG4gICAgICAgICAgICAgICAgY3NzPXt7IHRvcDogMTAgfX1cbiAgICAgICAgICAgICAgICBjbG9zYWJsZT17ZmFsc2V9XG4gICAgICAgICAgICAgICAgYWZ0ZXJDbG9zZT17dGhpcy5oYW5kbGVIZWFkZXJBZnRlckNsb3NlfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICAgIG1heEhlaWdodDogJzUwMHB4JyxcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3c6ICdhdXRvJyxcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZ1JpZ2h0OiAxMCxcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPEZsZXggY3NzPXt7IG1hcmdpbkJvdHRvbTogMTAgfX0+XG4gICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsZXg6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiA1LFxuICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICBLZXlcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICBjc3M9e3tcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IDEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmxleDogMSxcbiAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgVmFsdWVcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICA8L0ZsZXg+XG4gICAgICAgICAgICAgICAgICB7Y3VzdG9tSGVhZGVycy5tYXAoKGl0ZW0sIGkpID0+IChcbiAgICAgICAgICAgICAgICAgICAgPEZsZXhcbiAgICAgICAgICAgICAgICAgICAgICBrZXk9e2BoZWFkZXItJHtpfWB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgICAgICAgICAgICAgICBjc3M9e3sgbWFyZ2luQm90dG9tOiAxMCB9fVxuICAgICAgICAgICAgICAgICAgICAgIGFsaWduSXRlbXM9XCJjZW50ZXJcIlxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgY3NzPXt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZsZXg6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IDUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxJbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17aXRlbS5rZXl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtlID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVIZWFkZXJJdGVtQ2hhbmdlKGUsIGksICdrZXknKVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgICAgICAgICBmbGV4OiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiAxMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgPElucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXtpdGVtLnZhbHVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17ZSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlSGVhZGVySXRlbUNoYW5nZShlLCBpLCAndmFsdWUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiAxMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbWluV2lkdGg6IDE1LFxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICB7Y3VzdG9tSGVhZGVycy5sZW5ndGggPiAwICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPEljb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiY2xvc2VcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuaGFuZGxlUmVtb3ZlSGVhZGVyKGkpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzcz17e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvRmxleD5cbiAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgIGljb249XCJwbHVzXCJcbiAgICAgICAgICAgICAgICAgIHR5cGU9XCJwcmltYXJ5XCJcbiAgICAgICAgICAgICAgICAgIGNzcz17eyBtYXJnaW5Ub3A6IDEwLCBtYXJnaW5MZWZ0OiA1IH19XG4gICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmFkZE1vcmVIZWFkZXJ9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9Nb2RhbD5cbiAgICAgICAgICAgIDwvRmxleD5cbiAgICAgICAgICA8L0Zvcm0+XG4gICAgICAgICl9XG4gICAgICAgIHshaXNMb2FkaW5nICYmICFpc0Nvbm5lY3RlZCAmJiAoXG4gICAgICAgICAgPEFsZXJ0XG4gICAgICAgICAgICB0eXBlPVwiaW5mb1wiXG4gICAgICAgICAgICBkZXNjcmlwdGlvbj17XG4gICAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgPGgzIHN0eWxlPXt7IG1hcmdpblRvcDogJzFyZW0nIH19PkNvbm5lY3Rpb24gVGlwczwvaDM+XG4gICAgICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICBZb3UgY2FuIGNvbm5lY3QgdG8gYWxsIGluZGljZXMgYnkgcGFzc2luZyBhbnsnICd9XG4gICAgICAgICAgICAgICAgICAgICAgPGNvZGU+KjwvY29kZT4gaW4gdGhlIGFwcCBuYW1lIGlucHV0IGZpZWxkLlxuICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgWW91IGNhbiBhbHNvIGNvbm5lY3QgdG8gYSBzaW5nbGUgaW5kZXggb3IgbXVsdGlwbGUgaW5kaWNlc1xuICAgICAgICAgICAgICAgICAgICAgIGJ5IHBhc3NpbmcgdGhlbSBhcyBjb21tYSBzZXBhcmF0ZWQgdmFsdWVzOiBlLmcuXG4gICAgICAgICAgICAgICAgICAgICAgaW5kZXgxLGluZGV4MixpbmRleDMuXG4gICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICBBdm9pZCB1c2luZyBhIHRyYWlsaW5nIHNsYXNoIDxjb2RlPi88L2NvZGU+IGFmdGVyIHRoZVxuICAgICAgICAgICAgICAgICAgICAgIGNsdXN0ZXIgYWRkcmVzcy5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgIFlvdXIgY2x1c3RlciBuZWVkcyB0byBoYXZlIENPUlMgZW5hYmxlZCBmb3IgdGhlIG9yaWdpblxuICAgICAgICAgICAgICAgICAgICAgIHdoZXJlIERlamF2dSBpcyBydW5uaW5nLiBTZWUgYmVsb3cgZm9yIG1vcmUgb24gdGhhdC5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgICA8aDM+Q09SUyBTZXR0aW5nczwvaDM+XG4gICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgVG8gbWFrZSBzdXJlIHlvdSBoYXZlIGVuYWJsZWQgQ09SUyBzZXR0aW5ncyBmb3IgeW91clxuICAgICAgICAgICAgICAgICAgICBFbGFzdGljU2VhcmNoIGluc3RhbmNlLCBhZGQgdGhlIGZvbGxvd2luZyBsaW5lcyBpbiB0aGUgRVNcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbiBmaWxlOlxuICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgPHByZT5cbiAgICAgICAgICAgICAgICAgICAge2BodHRwLnBvcnQ6IDkyMDBcbmh0dHAuY29ycy5hbGxvdy1vcmlnaW46IGh0dHA6Ly9sb2NhbGhvc3Q6MTM1OCxodHRwOi8vMTI3LjAuMC4xOjEzNThcbmh0dHAuY29ycy5lbmFibGVkOiB0cnVlXG5odHRwLmNvcnMuYWxsb3ctaGVhZGVycyA6IFgtUmVxdWVzdGVkLVdpdGgsWC1BdXRoLVRva2VuLENvbnRlbnQtVHlwZSxDb250ZW50LUxlbmd0aCxBdXRob3JpemF0aW9uXG5odHRwLmNvcnMuYWxsb3ctY3JlZGVudGlhbHM6IHRydWVgfVxuICAgICAgICAgICAgICAgICAgPC9wcmU+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17eyBtYXJnaW5Ub3A6ICcycmVtJyB9fT5cbiAgICAgICAgICAgICAgICAgIDxwPlxuICAgICAgICAgICAgICAgICAgICBJZiB5b3UgYXJlIHJ1bm5pbmcgRWxhc3RpY1NlYXJjaCB2aWEgRG9ja2VyLCB1c2UgdGhlXG4gICAgICAgICAgICAgICAgICAgIGZvbGxvd2luZyBjb21tYW5kOlxuICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICcjZmVmZWZlJyxcbiAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAnOHB4JyxcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPGNvZGU+XG4gICAgICAgICAgICAgICAgICAgICAgZG9ja2VyIHJ1biAtLW5hbWUgZXMgLWQgLXAgOTIwMDo5MjAwIC1lIGh0dHAucG9ydD05MjAwIC1lXG4gICAgICAgICAgICAgICAgICAgICAgaHR0cC5jb3JzLmVuYWJsZWQ9dHJ1ZSAtZVxuICAgICAgICAgICAgICAgICAgICAgIGh0dHAuY29ycy5hbGxvdy1vcmlnaW49aHR0cDovL2xvY2FsaG9zdDoxMzU4LGh0dHA6Ly8xMjcuMC4wLjE6MTM1OFxuICAgICAgICAgICAgICAgICAgICAgIC1lXG4gICAgICAgICAgICAgICAgICAgICAgaHR0cC5jb3JzLmFsbG93LWhlYWRlcnM9WC1SZXF1ZXN0ZWQtV2l0aCxYLUF1dGgtVG9rZW4sQ29udGVudC1UeXBlLENvbnRlbnQtTGVuZ3RoLEF1dGhvcml6YXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAtZSBodHRwLmNvcnMuYWxsb3ctY3JlZGVudGlhbHM9dHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgIGRvY2tlci5lbGFzdGljLmNvL2VsYXN0aWNzZWFyY2gvZWxhc3RpY3NlYXJjaC1vc3M6Ni43LjJcbiAgICAgICAgICAgICAgICAgICAgPC9jb2RlPlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICA8cCBzdHlsZT17eyBtYXJnaW5Ub3A6ICcxNHB4JyB9fT5cbiAgICAgICAgICAgICAgICAgICAgT3IgdGhlIGZvbGxvd2luZyBpZiB5b3UgYXJlIHVzaW5nIHY3IEVsYXN0aWNTZWFyY2g6XG4gICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJyNmZWZlZmUnLFxuICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6ICc4cHgnLFxuICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8Y29kZT5cbiAgICAgICAgICAgICAgICAgICAgICBkb2NrZXIgcnVuIC1kIC0tcm0gLS1uYW1lIGVsYXN0aWNzZWFyY2ggLXAgOTIwMDo5MjAwIC1wXG4gICAgICAgICAgICAgICAgICAgICAgOTMwMDo5MzAwIC1lIGRpc2NvdmVyeS50eXBlPXNpbmdsZS1ub2RlIC1lXG4gICAgICAgICAgICAgICAgICAgICAgaHR0cC5jb3JzLmVuYWJsZWQ9dHJ1ZSAtZVxuICAgICAgICAgICAgICAgICAgICAgIGh0dHAuY29ycy5hbGxvdy1vcmlnaW49aHR0cDovL2xvY2FsaG9zdDoxMzU4LGh0dHA6Ly8xMjcuMC4wLjE6MTM1OFxuICAgICAgICAgICAgICAgICAgICAgIC1lXG4gICAgICAgICAgICAgICAgICAgICAgaHR0cC5jb3JzLmFsbG93LWhlYWRlcnM9WC1SZXF1ZXN0ZWQtV2l0aCxYLUF1dGgtVG9rZW4sQ29udGVudC1UeXBlLENvbnRlbnQtTGVuZ3RoLEF1dGhvcml6YXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAtZSBodHRwLmNvcnMuYWxsb3ctY3JlZGVudGlhbHM9dHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgIGRvY2tlci5lbGFzdGljLmNvL2VsYXN0aWNzZWFyY2gvZWxhc3RpY3NlYXJjaC1vc3M6Ny4wLjFcbiAgICAgICAgICAgICAgICAgICAgPC9jb2RlPlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgICB9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gc3RhdGUgPT4gKHtcbiAgYXBwbmFtZTogZ2V0QXBwbmFtZShzdGF0ZSksXG4gIHVybDogZ2V0VXJsKHN0YXRlKSxcbiAgaXNDb25uZWN0ZWQ6IGdldElzQ29ubmVjdGVkKHN0YXRlKSxcbiAgaXNMb2FkaW5nOiBnZXRJc0xvYWRpbmcoc3RhdGUpLFxuICBtb2RlOiBnZXRNb2RlKHN0YXRlKSxcbiAgaGVhZGVyczogZ2V0SGVhZGVycyhzdGF0ZSksXG59KTtcblxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0ge1xuICBjb25uZWN0QXBwLFxuICBkaXNjb25uZWN0QXBwLFxuICBzZXRNb2RlLFxuICBzZXRFcnJvcixcbiAgc2V0SGVhZGVycyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXG4gIG1hcFN0YXRlVG9Qcm9wcyxcbiAgbWFwRGlzcGF0Y2hUb1Byb3BzXG4pKENvbm5lY3RBcHApO1xuIl19 */"),
      onClick: this.addMoreHeader
    })))), !isLoading && !isConnected && _react.default.createElement(_alert.default, {
      type: "info",
      description: _react.default.createElement(_react.default.Fragment, null, _react.default.createElement("div", null, _react.default.createElement("h3", {
        style: {
          marginTop: '1rem'
        }
      }, "Connection Tips"), _react.default.createElement("ul", null, _react.default.createElement("li", null, "You can connect to all indices by passing an", ' ', _react.default.createElement("code", null, "*"), " in the app name input field."), _react.default.createElement("li", null, "You can also connect to a single index or multiple indices by passing them as comma separated values: e.g. index1,index2,index3."), _react.default.createElement("li", null, "Avoid using a trailing slash ", _react.default.createElement("code", null, "/"), " after the cluster address."), _react.default.createElement("li", null, "Your cluster needs to have CORS enabled for the origin where Dejavu is running. See below for more on that.")), _react.default.createElement("h3", null, "CORS Settings"), _react.default.createElement("p", null, "To make sure you have enabled CORS settings for your ElasticSearch instance, add the following lines in the ES configuration file:"), _react.default.createElement("pre", null, "http.port: 9200\nhttp.cors.allow-origin: http://localhost:1358,http://127.0.0.1:1358\nhttp.cors.enabled: true\nhttp.cors.allow-headers : X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization\nhttp.cors.allow-credentials: true")), _react.default.createElement("div", {
        style: {
          marginTop: '2rem'
        }
      }, _react.default.createElement("p", null, "If you are running ElasticSearch via Docker, use the following command:"), _react.default.createElement("div", {
        style: {
          background: '#fefefe',
          padding: '8px'
        }
      }, _react.default.createElement("code", null, "docker run --name es -d -p 9200:9200 -e http.port=9200 -e http.cors.enabled=true -e http.cors.allow-origin=http://localhost:1358,http://127.0.0.1:1358 -e http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization -e http.cors.allow-credentials=true docker.elastic.co/elasticsearch/elasticsearch-oss:6.7.2")), _react.default.createElement("p", {
        style: {
          marginTop: '14px'
        }
      }, "Or the following if you are using v7 ElasticSearch:"), _react.default.createElement("div", {
        style: {
          background: '#fefefe',
          padding: '8px'
        }
      }, _react.default.createElement("code", null, "docker run -d --rm --name elasticsearch -p 9200:9200 -p 9300:9300 -e discovery.type=single-node -e http.cors.enabled=true -e http.cors.allow-origin=http://localhost:1358,http://127.0.0.1:1358 -e http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization -e http.cors.allow-credentials=true docker.elastic.co/elasticsearch/elasticsearch-oss:7.0.1"))))
    }));
  }

}

const mapStateToProps = state => ({
  appname: (0, _app.getAppname)(state),
  url: (0, _app.getUrl)(state),
  isConnected: (0, _app.getIsConnected)(state),
  isLoading: (0, _app.getIsLoading)(state),
  mode: (0, _mode.getMode)(state),
  headers: (0, _app.getHeaders)(state)
});

const mapDispatchToProps = {
  connectApp: _actions.connectApp,
  disconnectApp: _actions.disconnectApp,
  setMode: _actions.setMode,
  setError: _actions.setError,
  setHeaders: _actions.setHeaders
};

var _default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(ConnectApp);

exports.default = _default;